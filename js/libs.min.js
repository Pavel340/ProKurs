!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=rt.type(t);return"function"!==n&&!rt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e,n){if(rt.isFunction(e))return rt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return rt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(dt.test(e))return rt.filter(e,t,n);e=rt.filter(e,t)}return rt.grep(t,function(t){return J.call(e,t)>-1!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return rt.each(t.match(wt)||[],function(t,n){e[n]=!0}),e}function s(){Z.removeEventListener("DOMContentLoaded",s),t.removeEventListener("load",s),rt.ready()}function a(){this.expando=rt.expando+a.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(kt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:St.test(n)?rt.parseJSON(n):n)}catch(t){}Tt.set(t,e,n)}else n=void 0;return n}function c(t,e,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return rt.css(t,e,"")},l=a(),c=n&&n[3]||(rt.cssNumber[e]?"":"px"),u=(rt.cssNumber[e]||"px"!==c&&+l)&&Lt.exec(rt.css(t,e));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{o=o||".5",u/=o,rt.style(t,e,u+c)}while(o!==(o=a()/l)&&1!==o&&--s)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function u(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&rt.nodeName(t,e)?rt.merge([t],n):n}function h(t,e){for(var n=0,i=t.length;n<i;n++)Ct.set(t[n],"globalEval",!e||Ct.get(e[n],"globalEval"))}function p(t,e,n,i,r){for(var o,s,a,l,c,p,f=e.createDocumentFragment(),d=[],g=0,m=t.length;g<m;g++)if((o=t[g])||0===o)if("object"===rt.type(o))rt.merge(d,o.nodeType?[o]:o);else if(Dt.test(o)){for(s=s||f.appendChild(e.createElement("div")),a=(Pt.exec(o)||["",""])[1].toLowerCase(),l=At[a]||At._default,s.innerHTML=l[1]+rt.htmlPrefilter(o)+l[2],p=l[0];p--;)s=s.lastChild;rt.merge(d,s.childNodes),s=f.firstChild,s.textContent=""}else d.push(e.createTextNode(o));for(f.textContent="",g=0;o=d[g++];)if(i&&rt.inArray(o,i)>-1)r&&r.push(o);else if(c=rt.contains(o.ownerDocument,o),s=u(f.appendChild(o),"script"),c&&h(s),n)for(p=0;o=s[p++];)jt.test(o.type||"")&&n.push(o);return f}function f(){return!0}function d(){return!1}function g(){try{return Z.activeElement}catch(t){}}function m(t,e,n,i,r,o){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)m(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=d;else if(!r)return t;return 1===o&&(s=r,r=function(t){return rt().off(t),s.apply(this,arguments)},r.guid=s.guid||(s.guid=rt.guid++)),t.each(function(){rt.event.add(this,e,r,i,n)})}function v(t,e){return rt.nodeName(t,"table")&&rt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function y(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function w(t){var e=Wt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function x(t,e){var n,i,r,o,s,a,l,c;if(1===e.nodeType){if(Ct.hasData(t)&&(o=Ct.access(t),s=Ct.set(e,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)rt.event.add(e,r,c[r][n])}Tt.hasData(t)&&(a=Tt.access(t),l=rt.extend({},a),Tt.set(e,l))}}function b(t,e){var n=e.nodeName.toLowerCase();"input"===n&&$t.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function _(t,e,n,i){e=Y.apply([],e);var r,o,s,a,l,c,h=0,f=t.length,d=f-1,g=e[0],m=rt.isFunction(g);if(m||f>1&&"string"==typeof g&&!it.checkClone&&qt.test(g))return t.each(function(r){var o=t.eq(r);m&&(e[0]=g.call(this,r,o.html())),_(o,e,n,i)});if(f&&(r=p(e,t[0].ownerDocument,!1,t,i),o=r.firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=rt.map(u(r,"script"),y),a=s.length;h<f;h++)l=r,h!==d&&(l=rt.clone(l,!0,!0),a&&rt.merge(s,u(l,"script"))),n.call(t[h],l,h);if(a)for(c=s[s.length-1].ownerDocument,rt.map(s,w),h=0;h<a;h++)l=s[h],jt.test(l.type||"")&&!Ct.access(l,"globalEval")&&rt.contains(c,l)&&(l.src?rt._evalUrl&&rt._evalUrl(l.src):rt.globalEval(l.textContent.replace(Rt,"")))}return t}function C(t,e,n){for(var i,r=e?rt.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||rt.cleanData(u(i)),i.parentNode&&(n&&rt.contains(i.ownerDocument,i)&&h(u(i,"script")),i.parentNode.removeChild(i));return t}function T(t,e){var n=rt(e.createElement(t)).appendTo(e.body),i=rt.css(n[0],"display");return n.detach(),i}function S(t){var e=Z,n=Ut[t];return n||(n=T(t,e),"none"!==n&&n||(Bt=(Bt||rt("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Bt[0].contentDocument,e.write(),e.close(),n=T(t,e),Bt.detach()),Ut[t]=n),n}function k(t,e,n){var i,r,o,s,a=t.style;return n=n||Qt(t),s=n?n.getPropertyValue(e)||n[e]:void 0,""!==s&&void 0!==s||rt.contains(t.ownerDocument,t)||(s=rt.style(t,e)),n&&!it.pixelMarginRight()&&Xt.test(s)&&Vt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o),void 0!==s?s+"":s}function E(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function L(t){if(t in ee)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=te.length;n--;)if((t=te[n]+e)in ee)return t}function O(t,e,n){var i=Lt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function z(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=rt.css(t,n+Ot[o],!0,r)),i?("content"===n&&(s-=rt.css(t,"padding"+Ot[o],!0,r)),"margin"!==n&&(s-=rt.css(t,"border"+Ot[o]+"Width",!0,r))):(s+=rt.css(t,"padding"+Ot[o],!0,r),"padding"!==n&&(s+=rt.css(t,"border"+Ot[o]+"Width",!0,r)));return s}function $(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=Qt(t),s="border-box"===rt.css(t,"boxSizing",!1,o);if(r<=0||null==r){if(r=k(t,e,o),(r<0||null==r)&&(r=t.style[e]),Xt.test(r))return r;i=s&&(it.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+z(t,e,n||(s?"border":"content"),i,o)+"px"}function P(t,e){for(var n,i,r,o=[],s=0,a=t.length;s<a;s++)i=t[s],i.style&&(o[s]=Ct.get(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&zt(i)&&(o[s]=Ct.access(i,"olddisplay",S(i.nodeName)))):(r=zt(i),"none"===n&&r||Ct.set(i,"olddisplay",r?n:rt.css(i,"display"))));for(s=0;s<a;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function j(t,e,n,i,r){return new j.prototype.init(t,e,n,i,r)}function A(){return t.setTimeout(function(){ne=void 0}),ne=rt.now()}function D(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)n=Ot[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function N(t,e,n){for(var i,r=(M.tweeners[e]||[]).concat(M.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function I(t,e,n){var i,r,o,s,a,l,c,u=this,h={},p=t.style,f=t.nodeType&&zt(t),d=Ct.get(t,"fxshow");n.queue||(a=rt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,u.always(function(){u.always(function(){a.unqueued--,rt.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=rt.css(t,"display"),"inline"===("none"===c?Ct.get(t,"olddisplay")||S(t.nodeName):c)&&"none"===rt.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",u.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],re.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(f?"hide":"show")){if("show"!==r||!d||void 0===d[i])continue;f=!0}h[i]=d&&d[i]||rt.style(t,i)}else c=void 0;if(rt.isEmptyObject(h))"inline"===("none"===c?S(t.nodeName):c)&&(p.display=c);else{d?"hidden"in d&&(f=d.hidden):d=Ct.access(t,"fxshow",{}),o&&(d.hidden=!f),f?rt(t).show():u.done(function(){rt(t).hide()}),u.done(function(){var e;Ct.remove(t,"fxshow");for(e in h)rt.style(t,e,h[e])});for(i in h)s=N(f?d[i]:0,i,u),i in d||(d[i]=s.start,f&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function H(t,e){var n,i,r,o,s;for(n in t)if(i=rt.camelCase(n),r=e[i],o=t[n],rt.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=rt.cssHooks[i])&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function M(t,e,n){var i,r,o=0,s=M.prefilters.length,a=rt.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ne||A(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,o=1-i,s=0,l=c.tweens.length;s<l;s++)c.tweens[s].run(o);return a.notifyWith(t,[c,o,n]),o<1&&l?n:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:rt.extend({},e),opts:rt.extend(!0,{specialEasing:{},easing:rt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ne||A(),duration:n.duration,tweens:[],createTween:function(e,n){var i=rt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(H(u,c.opts.specialEasing);o<s;o++)if(i=M.prefilters[o].call(c,t,u,c.opts))return rt.isFunction(i.stop)&&(rt._queueHooks(c.elem,c.opts.queue).stop=rt.proxy(i.stop,i)),i;return rt.map(u,N,c),rt.isFunction(c.opts.start)&&c.opts.start.call(t,c),rt.fx.timer(rt.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function F(t){return t.getAttribute&&t.getAttribute("class")||""}function q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(wt)||[];if(rt.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function W(t,e,n,i){function r(a){var l;return o[a]=!0,rt.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=t===Te;return r(e.dataTypes[0])||!o["*"]&&r("*")}function R(t,e){var n,i,r=rt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&rt.extend(!0,t,i),t}function B(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}function U(t,e,n,i){var r,o,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if(a=r.split(" "),a[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function V(t,e,n,i){var r;if(rt.isArray(e))rt.each(e,function(e,r){n||Le.test(t)?i(t,r):V(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==rt.type(e))i(t,e);else for(r in e)V(t+"["+r+"]",e[r],n,i)}function X(t){return rt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var Q=[],Z=t.document,G=Q.slice,Y=Q.concat,K=Q.push,J=Q.indexOf,tt={},et=tt.toString,nt=tt.hasOwnProperty,it={},rt=function(t,e){return new rt.fn.init(t,e)},ot=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,st=/^-ms-/,at=/-([\da-z])/gi,lt=function(t,e){return e.toUpperCase()};rt.fn=rt.prototype={jquery:"2.2.4",constructor:rt,selector:"",length:0,toArray:function(){return G.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:G.call(this)},pushStack:function(t){var e=rt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return rt.each(this,t)},map:function(t){return this.pushStack(rt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(G.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Q.sort,splice:Q.splice},rt.extend=rt.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||rt.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(c&&i&&(rt.isPlainObject(i)||(r=rt.isArray(i)))?(r?(r=!1,o=n&&rt.isArray(n)?n:[]):o=n&&rt.isPlainObject(n)?n:{},s[e]=rt.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},rt.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===rt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!rt.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==rt.type(t)||t.nodeType||rt.isWindow(t))return!1;if(t.constructor&&!nt.call(t,"constructor")&&!nt.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||nt.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?tt[et.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;(t=rt.trim(t))&&(1===t.indexOf("use strict")?(e=Z.createElement("script"),e.text=t,Z.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(st,"ms-").replace(at,lt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(ot,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?rt.merge(i,"string"==typeof t?[t]:t):K.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:J.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,i){var r,o,s=0,a=[];if(n(t))for(r=t.length;s<r;s++)null!=(o=e(t[s],s,i))&&a.push(o);else for(s in t)null!=(o=e(t[s],s,i))&&a.push(o);return Y.apply([],a)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),rt.isFunction(t))return i=G.call(arguments,2),r=function(){return t.apply(e||this,i.concat(G.call(arguments)))},r.guid=t.guid=t.guid||rt.guid++,r},now:Date.now,support:it}),"function"==typeof Symbol&&(rt.fn[Symbol.iterator]=Q[Symbol.iterator]),rt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){tt["[object "+e+"]"]=e.toLowerCase()});var ct=function(t){function e(t,e,n,i){var r,o,s,a,c,h,p,f,d=e&&e.ownerDocument,g=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==g&&9!==g&&11!==g)return n;if(!i&&((e?e.ownerDocument||e:H)!==z&&O(e),e=e||z,P)){if(11!==g&&(h=gt.exec(t)))if(r=h[1]){if(9===g){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&N(e,s)&&s.id===r)return n.push(s),n}else{if(h[2])return G.apply(n,e.getElementsByTagName(t)),n;if((r=h[3])&&w.getElementsByClassName&&e.getElementsByClassName)return G.apply(n,e.getElementsByClassName(r)),n}if(w.qsa&&!R[t+" "]&&(!j||!j.test(t))){if(1!==g)d=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(vt,"\\$&"):e.setAttribute("id",a=I),p=C(t),o=p.length,c=ut.test(a)?"#"+a:"[id='"+a+"']";o--;)p[o]=c+" "+u(p[o]);f=p.join(","),d=mt.test(t)&&l(e.parentNode)||e}if(f)try{return G.apply(n,d.querySelectorAll(f)),n}catch(t){}finally{a===I&&e.removeAttribute("id")}}}return S(t.replace(ot,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[I]=!0,t}function r(t){var e=z.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||U)-(~t.sourceIndex||U);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function l(t){return t&&void 0!==t.getElementsByTagName&&t}function c(){}function u(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function h(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=F++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,l,c,u=[M,o];if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(c=e[I]||(e[I]={}),l=c[e.uniqueID]||(c[e.uniqueID]={}),(a=l[i])&&a[0]===M&&a[1]===o)return u[2]=a[2];if(l[i]=u,u[2]=t(e,n,s))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function f(t,n,i){for(var r=0,o=n.length;r<o;r++)e(t,n[r],i);return i}function d(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(a)));return s}function g(t,e,n,r,o,s){return r&&!r[I]&&(r=g(r)),o&&!o[I]&&(o=g(o,s)),i(function(i,s,a,l){var c,u,h,p=[],g=[],m=s.length,v=i||f(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:d(v,p,t,a,l),w=n?o||(i?t:m||r)?[]:s:y;if(n&&n(y,w,a,l),r)for(c=d(w,g),r(c,[],a,l),u=c.length;u--;)(h=c[u])&&(w[g[u]]=!(y[g[u]]=h));if(i){if(o||t){if(o){for(c=[],u=w.length;u--;)(h=w[u])&&c.push(y[u]=h);o(null,w=[],c,l)}for(u=w.length;u--;)(h=w[u])&&(c=o?K(i,h):p[u])>-1&&(i[c]=!(s[c]=h))}}else w=d(w===s?w.splice(m,w.length):w),o?o(null,s,w,l):G.apply(s,w)})}function m(t){for(var e,n,i,r=t.length,o=x.relative[t[0].type],s=o||x.relative[" "],a=o?1:0,l=h(function(t){return t===e},s,!0),c=h(function(t){return K(e,t)>-1},s,!0),f=[function(t,n,i){var r=!o&&(i||n!==k)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,r}];a<r;a++)if(n=x.relative[t[a].type])f=[h(p(f),n)];else{if(n=x.filter[t[a].type].apply(null,t[a].matches),n[I]){for(i=++a;i<r&&!x.relative[t[i].type];i++);return g(a>1&&p(f),a>1&&u(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ot,"$1"),n,a<i&&m(t.slice(a,i)),i<r&&m(t=t.slice(i)),i<r&&u(t))}f.push(n)}return p(f)}function v(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,c){var u,h,p,f=0,g="0",m=i&&[],v=[],y=k,w=i||o&&x.find.TAG("*",c),b=M+=null==y?1:Math.random()||.1,_=w.length;for(c&&(k=s===z||s||c);g!==_&&null!=(u=w[g]);g++){if(o&&u){for(h=0,s||u.ownerDocument===z||(O(u),a=!P);p=t[h++];)if(p(u,s||z,a)){l.push(u);break}c&&(M=b)}r&&((u=!p&&u)&&f--,i&&m.push(u))}if(f+=g,r&&g!==f){for(h=0;p=n[h++];)p(m,v,s,a);if(i){if(f>0)for(;g--;)m[g]||v[g]||(v[g]=Q.call(l));v=d(v)}G.apply(l,v),c&&!i&&v.length>0&&f+n.length>1&&e.uniqueSort(l)}return c&&(M=b,k=y),m};return r?i(s):s}var y,w,x,b,_,C,T,S,k,E,L,O,z,$,P,j,A,D,N,I="sizzle"+1*new Date,H=t.document,M=0,F=0,q=n(),W=n(),R=n(),B=function(t,e){return t===e&&(L=!0),0},U=1<<31,V={}.hasOwnProperty,X=[],Q=X.pop,Z=X.push,G=X.push,Y=X.slice,K=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",it=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",rt=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),st=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(it),ut=new RegExp("^"+et+"$"),ht={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+it),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},pt=/^(?:input|select|textarea|button)$/i,ft=/^h\d$/i,dt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,vt=/'|\\/g,yt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),wt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},xt=function(){O()};try{G.apply(X=Y.call(H.childNodes),H.childNodes),X[H.childNodes.length].nodeType}catch(t){G={apply:X.length?function(t,e){Z.apply(t,Y.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}w=e.support={},_=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},O=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:H;return i!==z&&9===i.nodeType&&i.documentElement?(z=i,$=z.documentElement,P=!_(z),(n=z.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),w.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=r(function(t){return t.appendChild(z.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=dt.test(z.getElementsByClassName),w.getById=r(function(t){return $.appendChild(t).id=I,!z.getElementsByName||!z.getElementsByName(I).length}),w.getById?(x.find.ID=function(t,e){if(void 0!==e.getElementById&&P){var n=e.getElementById(t);return n?[n]:[]}},x.filter.ID=function(t){var e=t.replace(yt,wt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(yt,wt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&P)return e.getElementsByClassName(t)},A=[],j=[],(w.qsa=dt.test(z.querySelectorAll))&&(r(function(t){$.appendChild(t).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&j.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||j.push("\\["+tt+"*(?:value|"+J+")"),t.querySelectorAll("[id~="+I+"-]").length||j.push("~="),t.querySelectorAll(":checked").length||j.push(":checked"),t.querySelectorAll("a#"+I+"+*").length||j.push(".#.+[+~]")}),r(function(t){var e=z.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&j.push("name"+tt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||j.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),j.push(",.*:")})),(w.matchesSelector=dt.test(D=$.matches||$.webkitMatchesSelector||$.mozMatchesSelector||$.oMatchesSelector||$.msMatchesSelector))&&r(function(t){w.disconnectedMatch=D.call(t,"div"),D.call(t,"[s!='']:x"),A.push("!=",it)}),j=j.length&&new RegExp(j.join("|")),A=A.length&&new RegExp(A.join("|")),e=dt.test($.compareDocumentPosition),N=e||dt.test($.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},B=e?function(t,e){if(t===e)return L=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!w.sortDetached&&e.compareDocumentPosition(t)===n?t===z||t.ownerDocument===H&&N(H,t)?-1:e===z||e.ownerDocument===H&&N(H,e)?1:E?K(E,t)-K(E,e):0:4&n?-1:1)}:function(t,e){if(t===e)return L=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!r||!o)return t===z?-1:e===z?1:r?-1:o?1:E?K(E,t)-K(E,e):0;if(r===o)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===H?-1:l[i]===H?1:0},z):z},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==z&&O(t),n=n.replace(lt,"='$1']"),w.matchesSelector&&P&&!R[n+" "]&&(!A||!A.test(n))&&(!j||!j.test(n)))try{var i=D.call(t,n);if(i||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,z,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==z&&O(t),N(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==z&&O(t);var n=x.attrHandle[e.toLowerCase()],i=n&&V.call(x.attrHandle,e.toLowerCase())?n(t,e,!P):void 0;return void 0!==i?i:w.attributes||!P?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(L=!w.detectDuplicates,E=!w.sortStable&&t.slice(0),t.sort(B),L){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return E=null,t},b=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=b(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=b(e);return n},x=e.selectors={cacheLength:50,createPseudo:i,match:ht,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ht.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ct.test(n)&&(e=C(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=q[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&q(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(rt," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,p,f,d,g=o!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(m){if(o){for(;g;){for(p=e;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&y){for(p=m,h=p[I]||(p[I]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),c=u[t]||[],f=c[0]===M&&c[1],w=f&&c[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(w=f=0)||d.pop();)if(1===p.nodeType&&++w&&p===e){u[t]=[M,f,w];break}}else if(y&&(p=e,h=p[I]||(p[I]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),c=u[t]||[],f=c[0]===M&&c[1],w=f),!1===w)for(;(p=++f&&p&&p[g]||(w=f=0)||d.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++w||(y&&(h=p[I]||(p[I]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),u[t]=[M,w]),p!==e)););return(w-=r)===i||w%i==0&&w/i>=0}}},PSEUDO:function(t,n){var r,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[I]?o(n):o.length>1?(r=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=K(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=T(t.replace(ot,"$1"));return r[I]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(yt,wt),function(e){return(e.textContent||e.innerText||b(e)).indexOf(t)>-1}}),lang:i(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,wt).toLowerCase(),function(e){var n;do{if(n=P?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===$},focus:function(t){return t===z.activeElement&&(!z.hasFocus||z.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return ft.test(t.nodeName)},input:function(t){return pt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:a(function(){return[0]}),last:a(function(t,e){return[e-1]}),eq:a(function(t,e,n){return[n<0?n+e:n]}),even:a(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:a(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:a(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:a(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},x.pseudos.nth=x.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[y]=function(t){return function(e){
return"input"===e.nodeName.toLowerCase()&&e.type===t}}(y);for(y in{submit:!0,reset:!0})x.pseudos[y]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(y);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,C=e.tokenize=function(t,n){var i,r,o,s,a,l,c,u=W[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=x.preFilter;a;){i&&!(r=st.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=at.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(ot," ")}),a=a.slice(i.length));for(s in x.filter)!(r=ht[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):W(t,l).slice(0)},T=e.compile=function(t,e){var n,i=[],r=[],o=R[t+" "];if(!o){for(e||(e=C(t)),n=e.length;n--;)o=m(e[n]),o[I]?i.push(o):r.push(o);o=R(t,v(r,i)),o.selector=t}return o},S=e.select=function(t,e,n,i){var r,o,s,a,c,h="function"==typeof t&&t,p=!i&&C(t=h.selector||t);if(n=n||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===e.nodeType&&P&&x.relative[o[1].type]){if(!(e=(x.find.ID(s.matches[0].replace(yt,wt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ht.needsContext.test(t)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((c=x.find[a])&&(i=c(s.matches[0].replace(yt,wt),mt.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(r,1),!(t=i.length&&u(o)))return G.apply(n,i),n;break}}return(h||T(t,p))(i,e,!P,n,!e||mt.test(t)&&l(e.parentNode)||e),n},w.sortStable=I.split("").sort(B).join("")===I,w.detectDuplicates=!!L,O(),w.sortDetached=r(function(t){return 1&t.compareDocumentPosition(z.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(J,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);rt.find=ct,rt.expr=ct.selectors,rt.expr[":"]=rt.expr.pseudos,rt.uniqueSort=rt.unique=ct.uniqueSort,rt.text=ct.getText,rt.isXMLDoc=ct.isXML,rt.contains=ct.contains;var ut=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&rt(t).is(n))break;i.push(t)}return i},ht=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},pt=rt.expr.match.needsContext,ft=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,dt=/^.[^:#\[\.,]*$/;rt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?rt.find.matchesSelector(i,t)?[i]:[]:rt.find.matches(t,rt.grep(e,function(t){return 1===t.nodeType}))},rt.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(rt(t).filter(function(){for(e=0;e<n;e++)if(rt.contains(r[e],this))return!0}));for(e=0;e<n;e++)rt.find(t,r[e],i);return i=this.pushStack(n>1?rt.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&pt.test(t)?rt(t):t||[],!1).length}});var gt,mt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(rt.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||gt,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:mt.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof rt?e[0]:e,rt.merge(this,rt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:Z,!0)),ft.test(i[1])&&rt.isPlainObject(e))for(i in e)rt.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return r=Z.getElementById(i[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=Z,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):rt.isFunction(t)?void 0!==n.ready?n.ready(t):t(rt):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),rt.makeArray(t,this))}).prototype=rt.fn,gt=rt(Z);var vt=/^(?:parents|prev(?:Until|All))/,yt={children:!0,contents:!0,next:!0,prev:!0};rt.fn.extend({has:function(t){var e=rt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(rt.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=pt.test(t)||"string"!=typeof t?rt(t,e||this.context):0;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&rt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?rt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?J.call(rt(t),this[0]):J.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(rt.uniqueSort(rt.merge(this.get(),rt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),rt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ut(t,"parentNode")},parentsUntil:function(t,e,n){return ut(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return ut(t,"nextSibling")},prevAll:function(t){return ut(t,"previousSibling")},nextUntil:function(t,e,n){return ut(t,"nextSibling",n)},prevUntil:function(t,e,n){return ut(t,"previousSibling",n)},siblings:function(t){return ht((t.parentNode||{}).firstChild,t)},children:function(t){return ht(t.firstChild)},contents:function(t){return t.contentDocument||rt.merge([],t.childNodes)}},function(t,e){rt.fn[t]=function(n,i){var r=rt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=rt.filter(i,r)),this.length>1&&(yt[t]||rt.uniqueSort(r),vt.test(t)&&r.reverse()),this.pushStack(r)}});var wt=/\S+/g;rt.Callbacks=function(t){t="string"==typeof t?o(t):rt.extend({},t);var e,n,i,r,s=[],a=[],l=-1,c=function(){for(r=t.once,i=e=!0;a.length;l=-1)for(n=a.shift();++l<s.length;)!1===s[l].apply(n[0],n[1])&&t.stopOnFalse&&(l=s.length,n=!1);t.memory||(n=!1),e=!1,r&&(s=n?[]:"")},u={add:function(){return s&&(n&&!e&&(l=s.length-1,a.push(n)),function e(n){rt.each(n,function(n,i){rt.isFunction(i)?t.unique&&u.has(i)||s.push(i):i&&i.length&&"string"!==rt.type(i)&&e(i)})}(arguments),n&&!e&&c()),this},remove:function(){return rt.each(arguments,function(t,e){for(var n;(n=rt.inArray(e,s,n))>-1;)s.splice(n,1),n<=l&&l--}),this},has:function(t){return t?rt.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=a=[],n||(s=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},rt.extend({Deferred:function(t){var e=[["resolve","done",rt.Callbacks("once memory"),"resolved"],["reject","fail",rt.Callbacks("once memory"),"rejected"],["notify","progress",rt.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return rt.Deferred(function(n){rt.each(e,function(e,o){var s=rt.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&rt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?rt.extend(t,i):i}},r={};return i.pipe=i.then,rt.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=G.call(arguments),s=o.length,a=1!==s||t&&rt.isFunction(t.promise)?s:0,l=1===a?t:rt.Deferred(),c=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?G.call(arguments):r,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);r<s;r++)o[r]&&rt.isFunction(o[r].promise)?o[r].promise().progress(c(r,n,e)).done(c(r,i,o)).fail(l.reject):--a;return a||l.resolveWith(i,o),l.promise()}});var xt;rt.fn.ready=function(t){return rt.ready.promise().done(t),this},rt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?rt.readyWait++:rt.ready(!0)},ready:function(t){(!0===t?--rt.readyWait:rt.isReady)||(rt.isReady=!0,!0!==t&&--rt.readyWait>0||(xt.resolveWith(Z,[rt]),rt.fn.triggerHandler&&(rt(Z).triggerHandler("ready"),rt(Z).off("ready"))))}}),rt.ready.promise=function(e){return xt||(xt=rt.Deferred(),"complete"===Z.readyState||"loading"!==Z.readyState&&!Z.documentElement.doScroll?t.setTimeout(rt.ready):(Z.addEventListener("DOMContentLoaded",s),t.addEventListener("load",s))),xt.promise(e)},rt.ready.promise();var bt=function(t,e,n,i,r,o,s){var a=0,l=t.length,c=null==n;if("object"===rt.type(n)){r=!0;for(a in n)bt(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,rt.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(rt(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):o},_t=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};a.uid=1,a.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!_t(t))return{};var e=t[this.expando];return e||(e={},_t(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[e]=n;else for(i in e)r[i]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,rt.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{rt.isArray(e)?i=e.concat(e.map(rt.camelCase)):(r=rt.camelCase(e),e in o?i=[e,r]:(i=r,i=i in o?[i]:i.match(wt)||[])),n=i.length;for(;n--;)delete o[i[n]]}(void 0===e||rt.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!rt.isEmptyObject(e)}};var Ct=new a,Tt=new a,St=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,kt=/[A-Z]/g;rt.extend({hasData:function(t){return Tt.hasData(t)||Ct.hasData(t)},data:function(t,e,n){return Tt.access(t,e,n)},removeData:function(t,e){Tt.remove(t,e)},_data:function(t,e,n){return Ct.access(t,e,n)},_removeData:function(t,e){Ct.remove(t,e)}}),rt.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=Tt.get(o),1===o.nodeType&&!Ct.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=rt.camelCase(i.slice(5)),l(o,i,r[i])));Ct.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Tt.set(this,t)}):bt(this,function(e){var n,i;if(o&&void 0===e){if(void 0!==(n=Tt.get(o,t)||Tt.get(o,t.replace(kt,"-$&").toLowerCase())))return n;if(i=rt.camelCase(t),void 0!==(n=Tt.get(o,i)))return n;if(void 0!==(n=l(o,i,void 0)))return n}else i=rt.camelCase(t),this.each(function(){var n=Tt.get(this,i);Tt.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&Tt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Tt.remove(this,t)})}}),rt.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Ct.get(t,e),n&&(!i||rt.isArray(n)?i=Ct.access(t,e,rt.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=rt.queue(t,e),i=n.length,r=n.shift(),o=rt._queueHooks(t,e),s=function(){rt.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ct.get(t,n)||Ct.access(t,n,{empty:rt.Callbacks("once memory").add(function(){Ct.remove(t,[e+"queue",n])})})}}),rt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?rt.queue(this[0],t):void 0===e?this:this.each(function(){var n=rt.queue(this,t,e);rt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&rt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){rt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=rt.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Ct.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var Et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Lt=new RegExp("^(?:([+-])=|)("+Et+")([a-z%]*)$","i"),Ot=["Top","Right","Bottom","Left"],zt=function(t,e){return t=e||t,"none"===rt.css(t,"display")||!rt.contains(t.ownerDocument,t)},$t=/^(?:checkbox|radio)$/i,Pt=/<([\w:-]+)/,jt=/^$|\/(?:java|ecma)script/i,At={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td;var Dt=/<|&#?\w+;/;!function(){var t=Z.createDocumentFragment(),e=t.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),it.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",it.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Nt=/^key/,It=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ht=/^([^.]*)(?:\.(.+)|)/;rt.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,h,p,f,d,g,m=Ct.get(t);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=rt.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==rt&&rt.event.triggered!==e.type?rt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(wt)||[""],c=e.length;c--;)a=Ht.exec(e[c])||[],f=g=a[1],d=(a[2]||"").split(".").sort(),f&&(h=rt.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=rt.event.special[f]||{},u=rt.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&rt.expr.match.needsContext.test(r),namespace:d.join(".")},o),(p=l[f])||(p=l[f]=[],p.delegateCount=0,h.setup&&!1!==h.setup.call(t,i,d,s)||t.addEventListener&&t.addEventListener(f,s)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),rt.event.global[f]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,c,u,h,p,f,d,g,m=Ct.hasData(t)&&Ct.get(t);if(m&&(l=m.events)){for(e=(e||"").match(wt)||[""],c=e.length;c--;)if(a=Ht.exec(e[c])||[],f=g=a[1],d=(a[2]||"").split(".").sort(),f){for(h=rt.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,p=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,h.remove&&h.remove.call(t,u));s&&!p.length&&(h.teardown&&!1!==h.teardown.call(t,d,m.handle)||rt.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)rt.event.remove(t,f+e[c],n,i,!0);rt.isEmptyObject(l)&&Ct.remove(t,"handle events")}},dispatch:function(t){t=rt.event.fix(t);var e,n,i,r,o,s=[],a=G.call(arguments),l=(Ct.get(this,"events")||{})[t.type]||[],c=rt.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){for(s=rt.event.handlers.call(this,t,l),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,void 0!==(i=((rt.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(i=[],n=0;n<a;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?rt(r,this).index(l)>-1:rt.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Z,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[rt.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=It.test(r)?this.mouseHooks:Nt.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new rt.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=Z),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==g()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===g()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&rt.nodeName(this,"input"))return this.click(),!1},_default:function(t){return rt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},rt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},rt.Event=function(t,e){if(!(this instanceof rt.Event))return new rt.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?f:d):this.type=t,e&&rt.extend(this,e),this.timeStamp=t&&t.timeStamp||rt.now(),this[rt.expando]=!0},rt.Event.prototype={constructor:rt.Event,isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=f,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=f,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=f,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},rt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){rt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||rt.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),rt.fn.extend({on:function(t,e,n,i){return m(this,t,e,n,i)},one:function(t,e,n,i){return m(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,rt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=d),this.each(function(){rt.event.remove(this,t,n,e)})}});var Mt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Ft=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Wt=/^true\/(.*)/,Rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;rt.extend({htmlPrefilter:function(t){return t.replace(Mt,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),l=rt.contains(t.ownerDocument,t);if(!(it.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||rt.isXMLDoc(t)))for(s=u(a),o=u(t),i=0,r=o.length;i<r;i++)b(o[i],s[i]);if(e)if(n)for(o=o||u(t),s=s||u(a),i=0,r=o.length;i<r;i++)x(o[i],s[i]);else x(t,a);return s=u(a,"script"),s.length>0&&h(s,!l&&u(t,"script")),a},cleanData:function(t){for(var e,n,i,r=rt.event.special,o=0;void 0!==(n=t[o]);o++)if(_t(n)){if(e=n[Ct.expando]){if(e.events)for(i in e.events)r[i]?rt.event.remove(n,i):rt.removeEvent(n,i,e.handle);n[Ct.expando]=void 0}n[Tt.expando]&&(n[Tt.expando]=void 0)}}}),rt.fn.extend({domManip:_,detach:function(t){return C(this,t,!0)},remove:function(t){return C(this,t)},text:function(t){return bt(this,function(t){return void 0===t?rt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return _(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){v(this,t).appendChild(t)}})},prepend:function(){return _(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return _(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return _(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(rt.cleanData(u(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return rt.clone(this,t,e)})},html:function(t){return bt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ft.test(t)&&!At[(Pt.exec(t)||["",""])[1].toLowerCase()]){t=rt.htmlPrefilter(t);try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(rt.cleanData(u(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return _(this,arguments,function(e){var n=this.parentNode;rt.inArray(this,t)<0&&(rt.cleanData(u(this)),n&&n.replaceChild(e,this))},t)}}),rt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){rt.fn[t]=function(t){for(var n,i=[],r=rt(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),rt(r[s])[e](n),K.apply(i,n.get());return this.pushStack(i)}});var Bt,Ut={HTML:"block",BODY:"block"},Vt=/^margin/,Xt=new RegExp("^("+Et+")(?!px)[a-z%]+$","i"),Qt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Zt=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r},Gt=Z.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Gt.appendChild(s);var e=t.getComputedStyle(a);n="1%"!==e.top,o="2px"===e.marginLeft,i="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,Gt.removeChild(s)}var n,i,r,o,s=Z.createElement("div"),a=Z.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",it.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),rt.extend(it,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},pixelMarginRight:function(){return null==i&&e(),r},reliableMarginLeft:function(){return null==i&&e(),o},reliableMarginRight:function(){var e,n=a.appendChild(Z.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Gt.appendChild(s),e=!parseFloat(t.getComputedStyle(n).marginRight),Gt.removeChild(s),a.removeChild(n),e}}))}();var Yt=/^(none|table(?!-c[ea]).+)/,Kt={position:"absolute",visibility:"hidden",display:"block"},Jt={letterSpacing:"0",fontWeight:"400"},te=["Webkit","O","Moz","ms"],ee=Z.createElement("div").style;rt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=k(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=rt.camelCase(e),l=t.style;if(e=rt.cssProps[a]||(rt.cssProps[a]=L(a)||a),s=rt.cssHooks[e]||rt.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:l[e];o=typeof n,"string"===o&&(r=Lt.exec(n))&&r[1]&&(n=c(t,e,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(rt.cssNumber[a]?"":"px")),it.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n))}},css:function(t,e,n,i){var r,o,s,a=rt.camelCase(e);return e=rt.cssProps[a]||(rt.cssProps[a]=L(a)||a),s=rt.cssHooks[e]||rt.cssHooks[a],s&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=k(t,e,i)),"normal"===r&&e in Jt&&(r=Jt[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),rt.each(["height","width"],function(t,e){rt.cssHooks[e]={get:function(t,n,i){if(n)return Yt.test(rt.css(t,"display"))&&0===t.offsetWidth?Zt(t,Kt,function(){return $(t,e,i)}):$(t,e,i)},set:function(t,n,i){var r,o=i&&Qt(t),s=i&&z(t,e,i,"border-box"===rt.css(t,"boxSizing",!1,o),o);return s&&(r=Lt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=rt.css(t,e)),O(t,n,s)}}}),rt.cssHooks.marginLeft=E(it.reliableMarginLeft,function(t,e){if(e)return(parseFloat(k(t,"marginLeft"))||t.getBoundingClientRect().left-Zt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),rt.cssHooks.marginRight=E(it.reliableMarginRight,function(t,e){if(e)return Zt(t,{display:"inline-block"},k,[t,"marginRight"])}),rt.each({margin:"",padding:"",border:"Width"},function(t,e){rt.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+Ot[i]+e]=o[i]||o[i-2]||o[0];return r}},Vt.test(t)||(rt.cssHooks[t+e].set=O)}),rt.fn.extend({css:function(t,e){return bt(this,function(t,e,n){var i,r,o={},s=0;if(rt.isArray(e)){for(i=Qt(t),r=e.length;s<r;s++)o[e[s]]=rt.css(t,e[s],!1,i);return o}return void 0!==n?rt.style(t,e,n):rt.css(t,e)},t,e,arguments.length>1)},show:function(){return P(this,!0)},hide:function(){return P(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){zt(this)?rt(this).show():rt(this).hide()})}}),rt.Tween=j,j.prototype={constructor:j,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||rt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(rt.cssNumber[n]?"":"px")},cur:function(){var t=j.propHooks[this.prop];return t&&t.get?t.get(this):j.propHooks._default.get(this)},run:function(t){var e,n=j.propHooks[this.prop];return this.options.duration?this.pos=e=rt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):j.propHooks._default.set(this),this}},j.prototype.init.prototype=j.prototype,j.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=rt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){rt.fx.step[t.prop]?rt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[rt.cssProps[t.prop]]&&!rt.cssHooks[t.prop]?t.elem[t.prop]=t.now:rt.style(t.elem,t.prop,t.now+t.unit)}}},j.propHooks.scrollTop=j.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},rt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},rt.fx=j.prototype.init,rt.fx.step={};var ne,ie,re=/^(?:toggle|show|hide)$/,oe=/queueHooks$/;rt.Animation=rt.extend(M,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return c(n.elem,t,Lt.exec(e),n),n}]},tweener:function(t,e){rt.isFunction(t)?(e=t,t=["*"]):t=t.match(wt);for(var n,i=0,r=t.length;i<r;i++)n=t[i],M.tweeners[n]=M.tweeners[n]||[],M.tweeners[n].unshift(e)},prefilters:[I],prefilter:function(t,e){e?M.prefilters.unshift(t):M.prefilters.push(t)}}),rt.speed=function(t,e,n){var i=t&&"object"==typeof t?rt.extend({},t):{complete:n||!n&&e||rt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!rt.isFunction(e)&&e};return i.duration=rt.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in rt.fx.speeds?rt.fx.speeds[i.duration]:rt.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){rt.isFunction(i.old)&&i.old.call(this),i.queue&&rt.dequeue(this,i.queue)},i},rt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(zt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=rt.isEmptyObject(t),o=rt.speed(e,n,i),s=function(){var e=M(this,rt.extend({},t),o);(r||Ct.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=rt.timers,s=Ct.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&oe.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||rt.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Ct.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=rt.timers,s=i?i.length:0;for(n.finish=!0,rt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),rt.each(["toggle","show","hide"],function(t,e){var n=rt.fn[e];rt.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(D(e,!0),t,i,r)}}),rt.each({slideDown:D("show"),slideUp:D("hide"),slideToggle:D("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){rt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),rt.timers=[],rt.fx.tick=function(){var t,e=0,n=rt.timers;for(ne=rt.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||rt.fx.stop(),ne=void 0},rt.fx.timer=function(t){rt.timers.push(t),t()?rt.fx.start():rt.timers.pop()},rt.fx.interval=13,rt.fx.start=function(){
ie||(ie=t.setInterval(rt.fx.tick,rt.fx.interval))},rt.fx.stop=function(){t.clearInterval(ie),ie=null},rt.fx.speeds={slow:600,fast:200,_default:400},rt.fn.delay=function(e,n){return e=rt.fx?rt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var r=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(r)}})},function(){var t=Z.createElement("input"),e=Z.createElement("select"),n=e.appendChild(Z.createElement("option"));t.type="checkbox",it.checkOn=""!==t.value,it.optSelected=n.selected,e.disabled=!0,it.optDisabled=!n.disabled,t=Z.createElement("input"),t.value="t",t.type="radio",it.radioValue="t"===t.value}();var se,ae=rt.expr.attrHandle;rt.fn.extend({attr:function(t,e){return bt(this,rt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){rt.removeAttr(this,t)})}}),rt.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?rt.prop(t,e,n):(1===o&&rt.isXMLDoc(t)||(e=e.toLowerCase(),r=rt.attrHooks[e]||(rt.expr.match.bool.test(e)?se:void 0)),void 0!==n?null===n?void rt.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=rt.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!it.radioValue&&"radio"===e&&rt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(wt);if(o&&1===t.nodeType)for(;n=o[r++];)i=rt.propFix[n]||n,rt.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),se={set:function(t,e,n){return!1===e?rt.removeAttr(t,n):t.setAttribute(n,n),n}},rt.each(rt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ae[e]||rt.find.attr;ae[e]=function(t,e,i){var r,o;return i||(o=ae[e],ae[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,ae[e]=o),r}});var le=/^(?:input|select|textarea|button)$/i,ce=/^(?:a|area)$/i;rt.fn.extend({prop:function(t,e){return bt(this,rt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[rt.propFix[t]||t]})}}),rt.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&rt.isXMLDoc(t)||(e=rt.propFix[e]||e,r=rt.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=rt.find.attr(t,"tabindex");return e?parseInt(e,10):le.test(t.nodeName)||ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),it.optSelected||(rt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),rt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){rt.propFix[this.toLowerCase()]=this});var ue=/[\t\r\n\f]/g;rt.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(rt.isFunction(t))return this.each(function(e){rt(this).addClass(t.call(this,e,F(this)))});if("string"==typeof t&&t)for(e=t.match(wt)||[];n=this[l++];)if(r=F(n),i=1===n.nodeType&&(" "+r+" ").replace(ue," ")){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");a=rt.trim(i),r!==a&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(rt.isFunction(t))return this.each(function(e){rt(this).removeClass(t.call(this,e,F(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(wt)||[];n=this[l++];)if(r=F(n),i=1===n.nodeType&&(" "+r+" ").replace(ue," ")){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");a=rt.trim(i),r!==a&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):rt.isFunction(t)?this.each(function(n){rt(this).toggleClass(t.call(this,n,F(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=rt(this),o=t.match(wt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||(e=F(this),e&&Ct.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Ct.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+F(n)+" ").replace(ue," ").indexOf(e)>-1)return!0;return!1}});var he=/\r/g,pe=/[\x20\t\r\n\f]+/g;rt.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=rt.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,rt(this).val()):t,null==r?r="":"number"==typeof r?r+="":rt.isArray(r)&&(r=rt.map(r,function(t){return null==t?"":t+""})),(e=rt.valHooks[this.type]||rt.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return(e=rt.valHooks[r.type]||rt.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(he,""):null==n?"":n)}}}),rt.extend({valHooks:{option:{get:function(t){var e=rt.find.attr(t,"value");return null!=e?e:rt.trim(rt.text(t)).replace(pe," ")}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||r<0,s=o?null:[],a=o?r+1:i.length,l=r<0?a:o?r:0;l<a;l++)if(n=i[l],(n.selected||l===r)&&(it.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!rt.nodeName(n.parentNode,"optgroup"))){if(e=rt(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=rt.makeArray(e),s=r.length;s--;)i=r[s],(i.selected=rt.inArray(rt.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),rt.each(["radio","checkbox"],function(){rt.valHooks[this]={set:function(t,e){if(rt.isArray(e))return t.checked=rt.inArray(rt(t).val(),e)>-1}},it.checkOn||(rt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var fe=/^(?:focusinfocus|focusoutblur)$/;rt.extend(rt.event,{trigger:function(e,n,i,r){var o,s,a,l,c,u,h,p=[i||Z],f=nt.call(e,"type")?e.type:e,d=nt.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||Z,3!==i.nodeType&&8!==i.nodeType&&!fe.test(f+rt.event.triggered)&&(f.indexOf(".")>-1&&(d=f.split("."),f=d.shift(),d.sort()),c=f.indexOf(":")<0&&"on"+f,e=e[rt.expando]?e:new rt.Event(f,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:rt.makeArray(n,[e]),h=rt.event.special[f]||{},r||!h.trigger||!1!==h.trigger.apply(i,n))){if(!r&&!h.noBubble&&!rt.isWindow(i)){for(l=h.delegateType||f,fe.test(l+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(i.ownerDocument||Z)&&p.push(a.defaultView||a.parentWindow||t)}for(o=0;(s=p[o++])&&!e.isPropagationStopped();)e.type=o>1?l:h.bindType||f,u=(Ct.get(s,"events")||{})[e.type]&&Ct.get(s,"handle"),u&&u.apply(s,n),(u=c&&s[c])&&u.apply&&_t(s)&&(e.result=u.apply(s,n),!1===e.result&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),n)||!_t(i)||c&&rt.isFunction(i[f])&&!rt.isWindow(i)&&(a=i[c],a&&(i[c]=null),rt.event.triggered=f,i[f](),rt.event.triggered=void 0,a&&(i[c]=a)),e.result}},simulate:function(t,e,n){var i=rt.extend(new rt.Event,n,{type:t,isSimulated:!0});rt.event.trigger(i,null,e)}}),rt.fn.extend({trigger:function(t,e){return this.each(function(){rt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return rt.event.trigger(t,e,n,!0)}}),rt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){rt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),rt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),it.focusin="onfocusin"in t,it.focusin||rt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){rt.event.simulate(e,t.target,rt.event.fix(t))};rt.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=Ct.access(i,e);r||i.addEventListener(t,n,!0),Ct.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Ct.access(i,e)-1;r?Ct.access(i,e,r):(i.removeEventListener(t,n,!0),Ct.remove(i,e))}}});var de=t.location,ge=rt.now(),me=/\?/;rt.parseJSON=function(t){return JSON.parse(t+"")},rt.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||rt.error("Invalid XML: "+e),n};var ve=/#.*$/,ye=/([?&])_=[^&]*/,we=/^(.*?):[ \t]*([^\r\n]*)$/gm,xe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,be=/^(?:GET|HEAD)$/,_e=/^\/\//,Ce={},Te={},Se="*/".concat("*"),ke=Z.createElement("a");ke.href=de.href,rt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:de.href,type:"GET",isLocal:xe.test(de.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Se,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":rt.parseJSON,"text xml":rt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?R(R(t,rt.ajaxSettings),e):R(rt.ajaxSettings,t)},ajaxPrefilter:q(Ce),ajaxTransport:q(Te),ajax:function(e,n){function i(e,n,i,a){var c,h,y,w,b,C=n;2!==x&&(x=2,l&&t.clearTimeout(l),r=void 0,s=a||"",_.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(w=B(p,_,i)),w=U(p,w,_,c),c?(p.ifModified&&(b=_.getResponseHeader("Last-Modified"),b&&(rt.lastModified[o]=b),(b=_.getResponseHeader("etag"))&&(rt.etag[o]=b)),204===e||"HEAD"===p.type?C="nocontent":304===e?C="notmodified":(C=w.state,h=w.data,y=w.error,c=!y)):(y=C,!e&&C||(C="error",e<0&&(e=0))),_.status=e,_.statusText=(n||C)+"",c?g.resolveWith(f,[h,C,_]):g.rejectWith(f,[_,C,y]),_.statusCode(v),v=void 0,u&&d.trigger(c?"ajaxSuccess":"ajaxError",[_,p,c?h:y]),m.fireWith(f,[_,C]),u&&(d.trigger("ajaxComplete",[_,p]),--rt.active||rt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,o,s,a,l,c,u,h,p=rt.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?rt(f):rt.event,g=rt.Deferred(),m=rt.Callbacks("once memory"),v=p.statusCode||{},y={},w={},x=0,b="canceled",_={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!a)for(a={};e=we.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return x||(t=w[n]=w[n]||t,y[t]=e),this},overrideMimeType:function(t){return x||(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(x<2)for(e in t)v[e]=[v[e],t[e]];else _.always(t[_.status]);return this},abort:function(t){var e=t||b;return r&&r.abort(e),i(0,e),this}};if(g.promise(_).complete=m.add,_.success=_.done,_.error=_.fail,p.url=((e||p.url||de.href)+"").replace(ve,"").replace(_e,de.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=rt.trim(p.dataType||"*").toLowerCase().match(wt)||[""],null==p.crossDomain){c=Z.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=ke.protocol+"//"+ke.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=rt.param(p.data,p.traditional)),W(Ce,p,n,_),2===x)return _;u=rt.event&&p.global,u&&0==rt.active++&&rt.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!be.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(me.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(p.url=ye.test(o)?o.replace(ye,"$1_="+ge++):o+(me.test(o)?"&":"?")+"_="+ge++)),p.ifModified&&(rt.lastModified[o]&&_.setRequestHeader("If-Modified-Since",rt.lastModified[o]),rt.etag[o]&&_.setRequestHeader("If-None-Match",rt.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&_.setRequestHeader("Content-Type",p.contentType),_.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Se+"; q=0.01":""):p.accepts["*"]);for(h in p.headers)_.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(f,_,p)||2===x))return _.abort();b="abort";for(h in{success:1,error:1,complete:1})_[h](p[h]);if(r=W(Te,p,n,_)){if(_.readyState=1,u&&d.trigger("ajaxSend",[_,p]),2===x)return _;p.async&&p.timeout>0&&(l=t.setTimeout(function(){_.abort("timeout")},p.timeout));try{x=1,r.send(y,i)}catch(t){if(!(x<2))throw t;i(-1,t)}}else i(-1,"No Transport");return _},getJSON:function(t,e,n){return rt.get(t,e,n,"json")},getScript:function(t,e){return rt.get(t,void 0,e,"script")}}),rt.each(["get","post"],function(t,e){rt[e]=function(t,n,i,r){return rt.isFunction(n)&&(r=r||i,i=n,n=void 0),rt.ajax(rt.extend({url:t,type:e,dataType:r,data:n,success:i},rt.isPlainObject(t)&&t))}}),rt._evalUrl=function(t){return rt.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},rt.fn.extend({wrapAll:function(t){var e;return rt.isFunction(t)?this.each(function(e){rt(this).wrapAll(t.call(this,e))}):(this[0]&&(e=rt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return rt.isFunction(t)?this.each(function(e){rt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=rt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=rt.isFunction(t);return this.each(function(n){rt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){rt.nodeName(this,"body")||rt(this).replaceWith(this.childNodes)}).end()}}),rt.expr.filters.hidden=function(t){return!rt.expr.filters.visible(t)},rt.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Ee=/%20/g,Le=/\[\]$/,Oe=/\r?\n/g,ze=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;rt.param=function(t,e){var n,i=[],r=function(t,e){e=rt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=rt.ajaxSettings&&rt.ajaxSettings.traditional),rt.isArray(t)||t.jquery&&!rt.isPlainObject(t))rt.each(t,function(){r(this.name,this.value)});else for(n in t)V(n,t[n],e,r);return i.join("&").replace(Ee,"+")},rt.fn.extend({serialize:function(){return rt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=rt.prop(this,"elements");return t?rt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!rt(this).is(":disabled")&&$e.test(this.nodeName)&&!ze.test(t)&&(this.checked||!$t.test(t))}).map(function(t,e){var n=rt(this).val();return null==n?null:rt.isArray(n)?rt.map(n,function(t){return{name:e.name,value:t.replace(Oe,"\r\n")}}):{name:e.name,value:n.replace(Oe,"\r\n")}}).get()}}),rt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Pe={0:200,1223:204},je=rt.ajaxSettings.xhr();it.cors=!!je&&"withCredentials"in je,it.ajax=je=!!je,rt.ajaxTransport(function(e){var n,i;if(it.cors||je&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Pe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),rt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return rt.globalEval(t),t}}}),rt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),rt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=rt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),Z.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ae=[],De=/(=)\?(?=&|$)|\?\?/;rt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ae.pop()||rt.expando+"_"+ge++;return this[t]=!0,t}}),rt.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=!1!==e.jsonp&&(De.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&De.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=rt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(De,"$1"+r):!1!==e.jsonp&&(e.url+=(me.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||rt.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){void 0===o?rt(t).removeProp(r):t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,Ae.push(r)),s&&rt.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),rt.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Z;var i=ft.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=p([t],e,r),r&&r.length&&rt(r).remove(),rt.merge([],i.childNodes))};var Ne=rt.fn.load;rt.fn.load=function(t,e,n){if("string"!=typeof t&&Ne)return Ne.apply(this,arguments);var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=rt.trim(t.slice(a)),t=t.slice(0,a)),rt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&rt.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?rt("<div>").append(rt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},rt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){rt.fn[e]=function(t){return this.on(e,t)}}),rt.expr.filters.animated=function(t){return rt.grep(rt.timers,function(e){return t===e.elem}).length},rt.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,c,u=rt.css(t,"position"),h=rt(t),p={};"static"===u&&(t.style.position="relative"),a=h.offset(),o=rt.css(t,"top"),l=rt.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=h.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),rt.isFunction(e)&&(e=e.call(t,n,rt.extend({},a))),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+r),"using"in e?e.using.call(t,p):h.css(p)}},rt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){rt.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;if(o)return e=o.documentElement,rt.contains(e,i)?(r=i.getBoundingClientRect(),n=X(o),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===rt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),rt.nodeName(t[0],"html")||(i=t.offset()),i.top+=rt.css(t[0],"borderTopWidth",!0),i.left+=rt.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-rt.css(n,"marginTop",!0),left:e.left-i.left-rt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===rt.css(t,"position");)t=t.offsetParent;return t||Gt})}}),rt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;rt.fn[t]=function(i){return bt(this,function(t,i,r){var o=X(t);if(void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),rt.each(["top","left"],function(t,e){rt.cssHooks[e]=E(it.pixelPosition,function(t,n){if(n)return n=k(t,e),Xt.test(n)?rt(t).position()[e]+"px":n})}),rt.each({Height:"height",Width:"width"},function(t,e){rt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){rt.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===r?"margin":"border");return bt(this,function(e,n,i){var r;return rt.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?rt.css(e,n,s):rt.style(e,n,i,s)},e,o?i:void 0,o,null)}})}),rt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),rt.fn.andSelf=rt.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return rt});var Ie=t.jQuery,He=t.$;return rt.noConflict=function(e){return t.$===rt&&(t.$=He),e&&t.jQuery===rt&&(t.jQuery=Ie),rt},e||(t.jQuery=t.$=rt),rt}),function(t,e,n,i){function r(e,n){this.element=e,this.options=t.extend({},s,n),this._defaults=s,this._name=o,this.init()}var o="stellar",s={scrollProperty:"scroll",positionProperty:"position",horizontalScrolling:!0,verticalScrolling:!0,horizontalOffset:0,verticalOffset:0,responsive:!1,parallaxBackgrounds:!0,parallaxElements:!0,hideDistantElements:!0,hideElement:function(t){t.hide()},showElement:function(t){t.show()}},a={scroll:{getLeft:function(t){return t.scrollLeft()},setLeft:function(t,e){t.scrollLeft(e)},getTop:function(t){return t.scrollTop()},setTop:function(t,e){t.scrollTop(e)}},position:{getLeft:function(t){return-1*parseInt(t.css("left"),10)},getTop:function(t){return-1*parseInt(t.css("top"),10)}},margin:{getLeft:function(t){return-1*parseInt(t.css("margin-left"),10)},getTop:function(t){return-1*parseInt(t.css("margin-top"),10)}},transform:{getLeft:function(t){var e=getComputedStyle(t[0])[u];return"none"!==e?-1*parseInt(e.match(/(-?[0-9]+)/g)[4],10):0},getTop:function(t){var e=getComputedStyle(t[0])[u];return"none"!==e?-1*parseInt(e.match(/(-?[0-9]+)/g)[5],10):0}}},l={position:{setLeft:function(t,e){t.css("left",e)},setTop:function(t,e){t.css("top",e)}},transform:{setPosition:function(t,e,n,i,r){t[0].style[u]="translate3d("+(e-n)+"px, "+(i-r)+"px, 0)"}}},c=function(){var e,n=/^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/,i=t("script")[0].style,r="";for(e in i)if(n.test(e)){r=e.match(n)[0];break}return"WebkitOpacity"in i&&(r="Webkit"),"KhtmlOpacity"in i&&(r="Khtml"),function(t){return r+(r.length>0?t.charAt(0).toUpperCase()+t.slice(1):t)}}(),u=c("transform"),h=t("<div />",{style:"background:#fff"}).css("background-position-x")!==i,p=h?function(t,e,n){t.css({"background-position-x":e,"background-position-y":n})}:function(t,e,n){t.css("background-position",e+" "+n)},f=h?function(t){return[t.css("background-position-x"),t.css("background-position-y")]}:function(t){return t.css("background-position").split(" ")},d=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(t){setTimeout(t,1e3/60)};r.prototype={init:function(){this.options.name=o+"_"+Math.floor(1e9*Math.random()),this._defineElements(),this._defineGetters(),this._defineSetters(),this._handleWindowLoadAndResize(),this._detectViewport(),this.refresh({firstLoad:!0}),"scroll"===this.options.scrollProperty?this._handleScrollEvent():this._startAnimationLoop()},_defineElements:function(){this.element===n.body&&(this.element=e),this.$scrollElement=t(this.element),this.$element=this.element===e?t("body"):this.$scrollElement,this.$viewportElement=this.options.viewportElement!==i?t(this.options.viewportElement):this.$scrollElement[0]===e||"scroll"===this.options.scrollProperty?this.$scrollElement:this.$scrollElement.parent()},_defineGetters:function(){var t=this,e=a[t.options.scrollProperty];this._getScrollLeft=function(){return e.getLeft(t.$scrollElement)},this._getScrollTop=function(){return e.getTop(t.$scrollElement)}},_defineSetters:function(){var e=this,n=a[e.options.scrollProperty],i=l[e.options.positionProperty],r=n.setLeft,o=n.setTop;this._setScrollLeft="function"==typeof r?function(t){r(e.$scrollElement,t)}:t.noop,this._setScrollTop="function"==typeof o?function(t){o(e.$scrollElement,t)}:t.noop,this._setPosition=i.setPosition||function(t,n,r,o,s){e.options.horizontalScrolling&&i.setLeft(t,n,r),e.options.verticalScrolling&&i.setTop(t,o,s)}},_handleWindowLoadAndResize:function(){var n=this,i=t(e);n.options.responsive&&i.bind("load."+this.name,function(){n.refresh()}),i.bind("resize."+this.name,function(){n._detectViewport(),n.options.responsive&&n.refresh()})},refresh:function(n){var i=this,r=i._getScrollLeft(),o=i._getScrollTop();(!n||!n.firstLoad)&&this._reset(),this._setScrollLeft(0),this._setScrollTop(0),this._setOffsets(),this._findParticles(),this._findBackgrounds(),n&&n.firstLoad&&/WebKit/.test(navigator.userAgent)&&t(e).load(function(){var t=i._getScrollLeft(),e=i._getScrollTop();i._setScrollLeft(t+1),i._setScrollTop(e+1),i._setScrollLeft(t),i._setScrollTop(e)}),this._setScrollLeft(r),this._setScrollTop(o)},_detectViewport:function(){var t=this.$viewportElement.offset(),e=null!==t&&t!==i;this.viewportWidth=this.$viewportElement.width(),this.viewportHeight=this.$viewportElement.height(),this.viewportOffsetTop=e?t.top:0,this.viewportOffsetLeft=e?t.left:0},_findParticles:function(){var e=this;this._getScrollLeft(),this._getScrollTop();if(this.particles!==i)for(var n=this.particles.length-1;n>=0;n--)this.particles[n].$element.data("stellar-elementIsActive",i);this.particles=[],this.options.parallaxElements&&this.$element.find("[data-stellar-ratio]").each(function(n){var r,o,s,a,l,c,u,h,p,f=t(this),d=0,g=0,m=0,v=0;if(f.data("stellar-elementIsActive")){if(f.data("stellar-elementIsActive")!==this)return}else f.data("stellar-elementIsActive",this);e.options.showElement(f),f.data("stellar-startingLeft")?(f.css("left",f.data("stellar-startingLeft")),f.css("top",f.data("stellar-startingTop"))):(f.data("stellar-startingLeft",f.css("left")),f.data("stellar-startingTop",f.css("top"))),s=f.position().left,a=f.position().top,l="auto"===f.css("margin-left")?0:parseInt(f.css("margin-left"),10),c="auto"===f.css("margin-top")?0:parseInt(f.css("margin-top"),10),h=f.offset().left-l,p=f.offset().top-c,f.parents().each(function(){var e=t(this);if(!0===e.data("stellar-offset-parent"))return d=m,g=v,u=e,!1;m+=e.position().left,v+=e.position().top}),r=f.data("stellar-horizontal-offset")!==i?f.data("stellar-horizontal-offset"):u!==i&&u.data("stellar-horizontal-offset")!==i?u.data("stellar-horizontal-offset"):e.horizontalOffset,o=f.data("stellar-vertical-offset")!==i?f.data("stellar-vertical-offset"):u!==i&&u.data("stellar-vertical-offset")!==i?u.data("stellar-vertical-offset"):e.verticalOffset,e.particles.push({$element:f,$offsetParent:u,isFixed:"fixed"===f.css("position"),horizontalOffset:r,verticalOffset:o,startingPositionLeft:s,startingPositionTop:a,startingOffsetLeft:h,startingOffsetTop:p,parentOffsetLeft:d,parentOffsetTop:g,stellarRatio:f.data("stellar-ratio")!==i?f.data("stellar-ratio"):1,width:f.outerWidth(!0),height:f.outerHeight(!0),isHidden:!1})})},_findBackgrounds:function(){var e,n=this,r=this._getScrollLeft(),o=this._getScrollTop();this.backgrounds=[],this.options.parallaxBackgrounds&&(e=this.$element.find("[data-stellar-background-ratio]"),this.$element.data("stellar-background-ratio")&&(e=e.add(this.$element)),e.each(function(){var e,s,a,l,c,u,h,d=t(this),g=f(d),m=0,v=0,y=0,w=0;if(d.data("stellar-backgroundIsActive")){if(d.data("stellar-backgroundIsActive")!==this)return}else d.data("stellar-backgroundIsActive",this);d.data("stellar-backgroundStartingLeft")?p(d,d.data("stellar-backgroundStartingLeft"),d.data("stellar-backgroundStartingTop")):(d.data("stellar-backgroundStartingLeft",g[0]),d.data("stellar-backgroundStartingTop",g[1])),a="auto"===d.css("margin-left")?0:parseInt(d.css("margin-left"),10),l="auto"===d.css("margin-top")?0:parseInt(d.css("margin-top"),10),c=d.offset().left-a-r,u=d.offset().top-l-o,d.parents().each(function(){var e=t(this);if(!0===e.data("stellar-offset-parent"))return m=y,v=w,h=e,!1;y+=e.position().left,w+=e.position().top}),e=d.data("stellar-horizontal-offset")!==i?d.data("stellar-horizontal-offset"):h!==i&&h.data("stellar-horizontal-offset")!==i?h.data("stellar-horizontal-offset"):n.horizontalOffset,s=d.data("stellar-vertical-offset")!==i?d.data("stellar-vertical-offset"):h!==i&&h.data("stellar-vertical-offset")!==i?h.data("stellar-vertical-offset"):n.verticalOffset,n.backgrounds.push({$element:d,$offsetParent:h,isFixed:"fixed"===d.css("background-attachment"),horizontalOffset:e,verticalOffset:s,startingValueLeft:g[0],startingValueTop:g[1],startingBackgroundPositionLeft:isNaN(parseInt(g[0],10))?0:parseInt(g[0],10),startingBackgroundPositionTop:isNaN(parseInt(g[1],10))?0:parseInt(g[1],10),startingPositionLeft:d.position().left,startingPositionTop:d.position().top,startingOffsetLeft:c,startingOffsetTop:u,parentOffsetLeft:m,parentOffsetTop:v,stellarRatio:d.data("stellar-background-ratio")===i?1:d.data("stellar-background-ratio")})}))},_reset:function(){var t,e,n,i,r;for(r=this.particles.length-1;r>=0;r--)t=this.particles[r],e=t.$element.data("stellar-startingLeft"),n=t.$element.data("stellar-startingTop"),this._setPosition(t.$element,e,e,n,n),this.options.showElement(t.$element),t.$element.data("stellar-startingLeft",null).data("stellar-elementIsActive",null).data("stellar-backgroundIsActive",null);for(r=this.backgrounds.length-1;r>=0;r--)i=this.backgrounds[r],i.$element.data("stellar-backgroundStartingLeft",null).data("stellar-backgroundStartingTop",null),p(i.$element,i.startingValueLeft,i.startingValueTop)},destroy:function(){this._reset(),this.$scrollElement.unbind("resize."+this.name).unbind("scroll."+this.name),this._animationLoop=t.noop,t(e).unbind("load."+this.name).unbind("resize."+this.name)},_setOffsets:function(){var n=this,i=t(e);i.unbind("resize.horizontal-"+this.name).unbind("resize.vertical-"+this.name),"function"==typeof this.options.horizontalOffset?(this.horizontalOffset=this.options.horizontalOffset(),i.bind("resize.horizontal-"+this.name,function(){n.horizontalOffset=n.options.horizontalOffset()})):this.horizontalOffset=this.options.horizontalOffset,"function"==typeof this.options.verticalOffset?(this.verticalOffset=this.options.verticalOffset(),i.bind("resize.vertical-"+this.name,function(){n.verticalOffset=n.options.verticalOffset()})):this.verticalOffset=this.options.verticalOffset},_repositionElements:function(){var t,e,n,i,r,o,s,a,l,c,u=this._getScrollLeft(),h=this._getScrollTop(),f=!0,d=!0;if(this.currentScrollLeft!==u||this.currentScrollTop!==h||this.currentWidth!==this.viewportWidth||this.currentHeight!==this.viewportHeight){for(this.currentScrollLeft=u,this.currentScrollTop=h,this.currentWidth=this.viewportWidth,this.currentHeight=this.viewportHeight,c=this.particles.length-1;c>=0;c--)t=this.particles[c],e=t.isFixed?1:0,
this.options.horizontalScrolling?(o=(u+t.horizontalOffset+this.viewportOffsetLeft+t.startingPositionLeft-t.startingOffsetLeft+t.parentOffsetLeft)*-(t.stellarRatio+e-1)+t.startingPositionLeft,a=o-t.startingPositionLeft+t.startingOffsetLeft):(o=t.startingPositionLeft,a=t.startingOffsetLeft),this.options.verticalScrolling?(s=(h+t.verticalOffset+this.viewportOffsetTop+t.startingPositionTop-t.startingOffsetTop+t.parentOffsetTop)*-(t.stellarRatio+e-1)+t.startingPositionTop,l=s-t.startingPositionTop+t.startingOffsetTop):(s=t.startingPositionTop,l=t.startingOffsetTop),this.options.hideDistantElements&&(d=!this.options.horizontalScrolling||a+t.width>(t.isFixed?0:u)&&a<(t.isFixed?0:u)+this.viewportWidth+this.viewportOffsetLeft,f=!this.options.verticalScrolling||l+t.height>(t.isFixed?0:h)&&l<(t.isFixed?0:h)+this.viewportHeight+this.viewportOffsetTop),d&&f?(t.isHidden&&(this.options.showElement(t.$element),t.isHidden=!1),this._setPosition(t.$element,o,t.startingPositionLeft,s,t.startingPositionTop)):t.isHidden||(this.options.hideElement(t.$element),t.isHidden=!0);for(c=this.backgrounds.length-1;c>=0;c--)n=this.backgrounds[c],e=n.isFixed?0:1,i=this.options.horizontalScrolling?(u+n.horizontalOffset-this.viewportOffsetLeft-n.startingOffsetLeft+n.parentOffsetLeft-n.startingBackgroundPositionLeft)*(e-n.stellarRatio)+"px":n.startingValueLeft,r=this.options.verticalScrolling?(h+n.verticalOffset-this.viewportOffsetTop-n.startingOffsetTop+n.parentOffsetTop-n.startingBackgroundPositionTop)*(e-n.stellarRatio)+"px":n.startingValueTop,p(n.$element,i,r)}},_handleScrollEvent:function(){var t=this,e=!1,n=function(){t._repositionElements(),e=!1},i=function(){e||(d(n),e=!0)};this.$scrollElement.bind("scroll."+this.name,i),i()},_startAnimationLoop:function(){var t=this;this._animationLoop=function(){d(t._animationLoop),t._repositionElements()},this._animationLoop()}},t.fn[o]=function(e){var n=arguments;return e===i||"object"==typeof e?this.each(function(){t.data(this,"plugin_"+o)||t.data(this,"plugin_"+o,new r(this,e))}):"string"==typeof e&&"_"!==e[0]&&"init"!==e?this.each(function(){var i=t.data(this,"plugin_"+o);i instanceof r&&"function"==typeof i[e]&&i[e].apply(i,Array.prototype.slice.call(n,1)),"destroy"===e&&t.data(this,"plugin_"+o,null)}):void 0},t[o]=function(n){var i=t(e);return i.stellar.apply(i,Array.prototype.slice.call(arguments,0))},t[o].scrollProperty=a,t[o].positionProperty=l,e.Stellar=r}(jQuery,this,document),window.Modernizr=function(t,e,n){function i(t){m.cssText=t}function r(t,e){return i(x.join(t+";")+(e||""))}function o(t,e){return typeof t===e}function s(t,e){return!!~(""+t).indexOf(e)}function a(t,e){for(var i in t){var r=t[i];if(!s(r,"-")&&m[r]!==n)return"pfx"!=e||r}return!1}function l(t,e,i){for(var r in t){var s=e[t[r]];if(s!==n)return!1===i?t[r]:o(s,"function")?s.bind(i||e):s}return!1}function c(t,e,n){var i=t.charAt(0).toUpperCase()+t.slice(1),r=(t+" "+_.join(i+" ")+i).split(" ");return o(e,"string")||o(e,"undefined")?a(r,e):(r=(t+" "+C.join(i+" ")+i).split(" "),l(r,e,n))}var u,h,p={},f=e.documentElement,d="modernizr",g=e.createElement(d),m=g.style,v=e.createElement("input"),y=":)",w={}.toString,x=" -webkit- -moz- -o- -ms- ".split(" "),b="Webkit Moz O ms",_=b.split(" "),C=b.toLowerCase().split(" "),T={svg:"http://www.w3.org/2000/svg"},S={},k={},E={},L=[],O=L.slice,z=function(t,n,i,r){var o,s,a,l,c=e.createElement("div"),u=e.body,h=u||e.createElement("body");if(parseInt(i,10))for(;i--;)a=e.createElement("div"),a.id=r?r[i]:d+(i+1),c.appendChild(a);return o=["&#173;",'<style id="s',d,'">',t,"</style>"].join(""),c.id=d,(u?c:h).innerHTML+=o,h.appendChild(c),u||(h.style.background="",h.style.overflow="hidden",l=f.style.overflow,f.style.overflow="hidden",f.appendChild(h)),s=n(c,t),u?c.parentNode.removeChild(c):(h.parentNode.removeChild(h),f.style.overflow=l),!!s},$=function(e){var n=t.matchMedia||t.msMatchMedia;if(n)return n(e)&&n(e).matches||!1;var i;return z("@media "+e+" { #"+d+" { position: absolute; } }",function(e){i="absolute"==(t.getComputedStyle?getComputedStyle(e,null):e.currentStyle).position}),i},P=function(){function t(t,r){r=r||e.createElement(i[t]||"div"),t="on"+t;var s=t in r;return s||(r.setAttribute||(r=e.createElement("div")),r.setAttribute&&r.removeAttribute&&(r.setAttribute(t,""),s=o(r[t],"function"),o(r[t],"undefined")||(r[t]=n),r.removeAttribute(t))),r=null,s}var i={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return t}(),j={}.hasOwnProperty;h=o(j,"undefined")||o(j.call,"undefined")?function(t,e){return e in t&&o(t.constructor.prototype[e],"undefined")}:function(t,e){return j.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var n=O.call(arguments,1),i=function(){if(this instanceof i){var r=function(){};r.prototype=e.prototype;var o=new r,s=e.apply(o,n.concat(O.call(arguments)));return Object(s)===s?s:o}return e.apply(t,n.concat(O.call(arguments)))};return i}),S.flexbox=function(){return c("flexWrap")},S.flexboxlegacy=function(){return c("boxDirection")},S.canvas=function(){var t=e.createElement("canvas");return!(!t.getContext||!t.getContext("2d"))},S.canvastext=function(){return!(!p.canvas||!o(e.createElement("canvas").getContext("2d").fillText,"function"))},S.webgl=function(){return!!t.WebGLRenderingContext},S.touch=function(){var n;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?n=!0:z(["@media (",x.join("touch-enabled),("),d,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){n=9===t.offsetTop}),n},S.geolocation=function(){return"geolocation"in navigator},S.postmessage=function(){return!!t.postMessage},S.websqldatabase=function(){return!!t.openDatabase},S.indexedDB=function(){return!!c("indexedDB",t)},S.hashchange=function(){return P("hashchange",t)&&(e.documentMode===n||e.documentMode>7)},S.history=function(){return!(!t.history||!history.pushState)},S.draganddrop=function(){var t=e.createElement("div");return"draggable"in t||"ondragstart"in t&&"ondrop"in t},S.websockets=function(){return"WebSocket"in t||"MozWebSocket"in t},S.rgba=function(){return i("background-color:rgba(150,255,150,.5)"),s(m.backgroundColor,"rgba")},S.hsla=function(){return i("background-color:hsla(120,40%,100%,.5)"),s(m.backgroundColor,"rgba")||s(m.backgroundColor,"hsla")},S.multiplebgs=function(){return i("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(m.background)},S.backgroundsize=function(){return c("backgroundSize")},S.borderimage=function(){return c("borderImage")},S.borderradius=function(){return c("borderRadius")},S.boxshadow=function(){return c("boxShadow")},S.textshadow=function(){return""===e.createElement("div").style.textShadow},S.opacity=function(){return r("opacity:.55"),/^0.55$/.test(m.opacity)},S.cssanimations=function(){return c("animationName")},S.csscolumns=function(){return c("columnCount")},S.cssgradients=function(){var t="background-image:";return i((t+"-webkit- ".split(" ").join("gradient(linear,left top,right bottom,from(#9f9),to(white));"+t)+x.join("linear-gradient(left top,#9f9, white);"+t)).slice(0,-t.length)),s(m.backgroundImage,"gradient")},S.cssreflections=function(){return c("boxReflect")},S.csstransforms=function(){return!!c("transform")},S.csstransforms3d=function(){var t=!!c("perspective");return t&&"webkitPerspective"in f.style&&z("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(e){t=9===e.offsetLeft&&3===e.offsetHeight}),t},S.csstransitions=function(){return c("transition")},S.fontface=function(){var t;return z('@font-face {font-family:"font";src:url("https://")}',function(n,i){var r=e.getElementById("smodernizr"),o=r.sheet||r.styleSheet,s=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";t=/src/i.test(s)&&0===s.indexOf(i.split(" ")[0])}),t},S.generatedcontent=function(){var t;return z(["#",d,"{font:0/0 a}#",d,':after{content:"',y,'";visibility:hidden;font:3px/1 a}'].join(""),function(e){t=e.offsetHeight>=3}),t},S.video=function(){var t=e.createElement("video"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=t.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=t.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(t){}return n},S.audio=function(){var t=e.createElement("audio"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=t.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(t){}return n},S.localstorage=function(){try{return localStorage.setItem(d,d),localStorage.removeItem(d),!0}catch(t){return!1}},S.sessionstorage=function(){try{return sessionStorage.setItem(d,d),sessionStorage.removeItem(d),!0}catch(t){return!1}},S.webworkers=function(){return!!t.Worker},S.applicationcache=function(){return!!t.applicationCache},S.svg=function(){return!!e.createElementNS&&!!e.createElementNS(T.svg,"svg").createSVGRect},S.inlinesvg=function(){var t=e.createElement("div");return t.innerHTML="<svg/>",(t.firstChild&&t.firstChild.namespaceURI)==T.svg},S.smil=function(){return!!e.createElementNS&&/SVGAnimate/.test(w.call(e.createElementNS(T.svg,"animate")))},S.svgclippaths=function(){return!!e.createElementNS&&/SVGClipPath/.test(w.call(e.createElementNS(T.svg,"clipPath")))};for(var A in S)h(S,A)&&(u=A.toLowerCase(),p[u]=S[A](),L.push((p[u]?"":"no-")+u));return p.input||function(){p.input=function(n){for(var i=0,r=n.length;r>i;i++)E[n[i]]=!!(n[i]in v);return E.list&&(E.list=!(!e.createElement("datalist")||!t.HTMLDataListElement)),E}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(t){for(var i,r,o,s=0,a=t.length;a>s;s++)v.setAttribute("type",r=t[s]),i="text"!==v.type,i&&(v.value=y,v.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(r)&&v.style.WebkitAppearance!==n?(f.appendChild(v),o=e.defaultView,i=o.getComputedStyle&&"textfield"!==o.getComputedStyle(v,null).WebkitAppearance&&0!==v.offsetHeight,f.removeChild(v)):/^(search|tel)$/.test(r)||(i=/^(url|email)$/.test(r)?v.checkValidity&&!1===v.checkValidity():v.value!=y)),k[t[s]]=!!i;return k}("search tel url email datetime date month week time datetime-local number range color".split(" "))}(),p.addTest=function(t,e){if("object"==typeof t)for(var i in t)h(t,i)&&p.addTest(i,t[i]);else{if(t=t.toLowerCase(),p[t]!==n)return p;e="function"==typeof e?e():e,f.className+=" "+(e?"":"no-")+t,p[t]=e}return p},i(""),g=v=null,function(t,e){function n(t,e){var n=t.createElement("p"),i=t.getElementsByTagName("head")[0]||t.documentElement;return n.innerHTML="x<style>"+e+"</style>",i.insertBefore(n.lastChild,i.firstChild)}function i(){var t=v.elements;return"string"==typeof t?t.split(" "):t}function r(t){var e=m[t[d]];return e||(e={},g++,t[d]=g,m[g]=e),e}function o(t,n,i){if(n||(n=e),u)return n.createElement(t);i||(i=r(n));var o;return o=i.cache[t]?i.cache[t].cloneNode():f.test(t)?(i.cache[t]=i.createElem(t)).cloneNode():i.createElem(t),!o.canHaveChildren||p.test(t)||o.tagUrn?o:i.frag.appendChild(o)}function s(t,n){if(t||(t=e),u)return t.createDocumentFragment();n=n||r(t);for(var o=n.frag.cloneNode(),s=0,a=i(),l=a.length;l>s;s++)o.createElement(a[s]);return o}function a(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(n){return v.shivMethods?o(n,t,e):e.createElem(n)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/[\w\-]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(v,e.frag)}function l(t){t||(t=e);var i=r(t);return!v.shivCSS||c||i.hasCSS||(i.hasCSS=!!n(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),u||a(t,i),t}var c,u,h=t.html5||{},p=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,f=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,d="_html5shiv",g=0,m={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",c="hidden"in t,u=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return void 0===t.cloneNode||void 0===t.createDocumentFragment||void 0===t.createElement}()}catch(t){c=!0,u=!0}}();var v={elements:h.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:"3.7.0",shivCSS:!1!==h.shivCSS,supportsUnknownElements:u,shivMethods:!1!==h.shivMethods,type:"default",shivDocument:l,createElement:o,createDocumentFragment:s};t.html5=v,l(e)}(this,e),p._version="2.8.3",p._prefixes=x,p._domPrefixes=C,p._cssomPrefixes=_,p.mq=$,p.hasEvent=P,p.testProp=function(t){return a([t])},p.testAllProps=c,p.testStyles=z,p.prefixed=function(t,e,n){return e?c(t,e,n):c(t,"pfx")},f.className=f.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+" js "+L.join(" "),p}(this,this.document),function(t,e,n,i){function r(e,n){this.settings=null,this.options=t.extend({},r.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,n){this._handlers[n]=t.proxy(this[n],this)},this)),t.each(r.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(r.Workers,t.proxy(function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,o[i]=r?e*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,r=Math.max(2*i.items,4),o=2*Math.ceil(n.length/2),s=i.loop&&n.length?i.rewind?r:Math.max(r,o):0,a="",l="";for(s/=2;s--;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,o=[];++n<e;)i=o[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,o.push(i+r*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,s=this.coordinates(this.current())+o,a=s+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+o*r,(this.op(t,"<=",s)&&this.op(t,">",a)||this.op(e,"<",s)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],r.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,n,r;e=this.$element.find("img"),n=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,r=this.$element.children(n).width(),e.length&&r<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,r=null;n?(t.each(n,function(t){t<=e&&t>i&&(i=Number(t))}),r=t.extend({},this.options,n[i]),"function"==typeof r.stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=i,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},r.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy(function(t){return this[t]},this._invalidated),r={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(t){switch(t=t||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))},r.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,o.x=Math.max(Math.min(o.x,e+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},r.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,o=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(e,n){var i=-1,r=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy(function(t,s){return"left"===n&&e>s-30&&e<s+30?i=t:"right"===n&&e>s-r-30&&e<s-r+30?i=t+1:this.op(e,"<",s)&&this.op(e,">",o[t+1]||s-r)&&(i="left"===n?t+1:t),-1===i},this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?i=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(i=e=this.maximum())),i},r.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},r.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},r.prototype.current=function(t){if(t===i)return this._current;if(0===this._items.length)return i;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==i&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},r.prototype.reset=function(t){(t=this.normalize(t))!==i&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},r.prototype.normalize=function(t,e){var n=this._items.length,r=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=i:(t<0||t>=n+r)&&(t=((t-r/2)%n+n)%n+r/2),t},r.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},r.prototype.maximum=function(t){var e,n,i,r=this.settings,o=this._coordinates.length;if(r.loop)o=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){for(e=this._items.length,n=this._items[--e].width(),i=this.$element.width();e--&&!((n+=this._items[e].width()+this.settings.margin)>i););o=e+1}else o=r.center?this._items.length-1:this._items.length-r.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},r.prototype.minimum=function(t){return t?0:this._clones.length/2},r.prototype.items=function(t){return t===i?this._items.slice():(t=this.normalize(t,!0),this._items[t])},r.prototype.mergers=function(t){return t===i?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},r.prototype.clones=function(e){var n=this._clones.length/2,r=n+this._items.length,o=function(t){return t%2==0?r+t/2:n-(t+1)/2};return e===i?t.map(this._clones,function(t,e){return o(e)}):t.map(this._clones,function(t,n){return t===e?o(n):null})},r.prototype.speed=function(t){return t!==i&&(this._speed=t),this._speed},r.prototype.coordinates=function(e){var n,r=1,o=e-1;return e===i?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,o=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[o]||0))/2*r):n=this._coordinates[o]||0,n=Math.ceil(n))},r.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},r.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),o=(r>0)-(r<0),s=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>s/2&&(r+=-1*o*s),t=n+r,(i=((t-a)%s+s)%s+a)!==t&&i-r<=l&&i-r>0&&(n=i-r,t=i,this.reset(n))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},r.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},r.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},r.prototype.onTransitionEnd=function(t){if(t!==i&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},r.prototype.viewport=function(){var i;return this.options.responsiveBaseElement!==e?i=t(this.options.responsiveBaseElement).width():e.innerWidth?i=e.innerWidth:n.documentElement&&n.documentElement.clientWidth?i=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),i},r.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(e,n){var r=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:n}),e=this.prepare(e),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[n-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(e),this._items.splice(n,0,e),this._mergers.splice(n,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:e,position:n})},r.prototype.remove=function(t){(t=this.normalize(t,!0))!==i&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},r.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy(function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},r.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},r.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},
r.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},r.prototype.trigger=function(e,n,i,o,s){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:r.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},r.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===i&&(this._states.current[e]=0),this._states.current[e]++},this))},r.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},r.prototype.register=function(e){if(e.type===r.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===r.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(n,i){return t.inArray(n,this._states.tags[e.name])===i},this)))},r.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},r.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},r.prototype.pointer=function(t){var n={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(n.x=t.pageX,n.y=t.pageY):(n.x=t.clientX,n.y=t.clientY),n},r.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},r.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=t(this),o=i.data("owl.carousel");o||(o=new r(this,"object"==typeof e&&e),i.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,n){o.register({type:r.Type.Event,name:n}),o.$element.on(n+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),o[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,n)})},t.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,n;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var n=this._core.settings,i=n.center&&Math.ceil(n.items/2)||n.items,r=n.center&&-1*i||0,o=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+r,s=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);r++<i;)this.load(s/2+this._core.relative(o)),s&&t.each(this._core.clones(this._core.relative(o)),a),o++},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1},r.prototype.load=function(n){var i=this._core.$stage.children().eq(n),r=i&&i.find(".owl-lazy");!r||t.inArray(i.get(0),this._loaded)>-1||(r.each(t.proxy(function(n,i){var r,o=t(i),s=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:s},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:s},"lazy")},this)).attr("src",s):(r=new Image,r.onload=t.proxy(function(){o.css({"background-image":'url("'+s+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:s},"lazy")},this),r.src=s)},this)),this._loaded.push(i.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.$stage.children().toArray().slice(e,n),r=[],o=0;t.each(i,function(e,n){r.push(t(n).height())}),o=Math.max.apply(null,r),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var n=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,s=t.attr("href");if(!s)throw new Error("Missing video URL.");if(i=s.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),i[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[s]={type:n,id:i,width:r,height:o},e.attr("data-video",s),this.thumbnail(t,this._videos[s])},r.prototype.thumbnail=function(e,n){var i,r,o,s=n.width&&n.height?'style="width:'+n.width+"px;height:"+n.height+'px;"':"",a=e.find("img"),l="src",c="",u=this._core.settings,h=function(t){r='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(i),e.after(r)};if(e.wrap('<div class="owl-video-wrapper"'+s+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length)return h(a.attr(l)),a.remove(),!1;"youtube"===n.type?(o="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",h(o)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,h(o)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,h(o)}})},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var n,i=t(e.target),r=i.closest("."+this._core.settings.itemClass),o=this._videos[r.attr("data-video")],s=o.width||"100%",a=o.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),r=this._core.items(this._core.relative(r.index())),this._core.reset(r.index()),"youtube"===o.type?n='<iframe width="'+s+'" height="'+a+'" src="//www.youtube.com/embed/'+o.id+"?autoplay=1&rel=0&v="+o.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===o.type?n='<iframe src="//player.vimeo.com/video/'+o.id+'?autoplay=1" width="'+s+'" height="'+a+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===o.type&&(n='<iframe frameborder="0"height="'+a+'"width="'+s+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+o.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+n+"</div>").insertAfter(r.find(".owl-video")),this._playing=r.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this.core=e,this.core.options=t.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=i,this.next=i,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,n=t.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,s=this.core.settings.animateOut;this.core.current()!==this.previous&&(s&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(t.support.animation.end,n).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(s)),o&&r.one(t.support.animation.end,n).addClass("animated owl-animated-in").addClass(o))}},r.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},r.prototype._getNextTimeout=function(i,r){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||n.hidden||this._core.next(r||this._core.settings.autoplaySpeed)},this),i||this._core.settings.autoplayTimeout)},r.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},r.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},r.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,n=this._core.settings;this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[t("<div>").addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,n,i;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},r.prototype.update=function(){var t,e,n,i=this._core.clones().length/2,r=i+this._core.items().length,o=this._core.maximum(!0),s=this._core.settings,a=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=i,e=0,n=0;t<r;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(o,t-i),end:t-i+a-1}),Math.min(o,t-i)===o)break;e=0,++n}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,r=this._core.relative(this._core.current()),o=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!o&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,n){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var n,i,r=this._core.settings;return"page"==r.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=r.slideBy:n-=r.slideBy),n},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,n,i){var r;!i&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}},this),"changed.owl.carousel":t.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===i?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var n=e.location.hash.substring(1),i=this._core.$stage.children(),r=this._hashes[n]&&i.index(this._hashes[n]);void 0!==r&&r!==this._core.current()&&this._core.to(this._core.relative(r),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var n,i;t(e).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){function r(e,n){var r=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(o+" ")+o).split(" "),function(t,e){if(s[e]!==i)return r=!n||e,!1}),r}function o(t){return r(t,!0)}var s=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!r("transform")},csstransforms3d:function(){return!!r("perspective")},csstransitions:function(){return!!r("transition")},cssanimations:function(){return!!r("animation")}};c.csstransitions()&&(t.support.transition=new String(o("transition")),t.support.transition.end=l.transition.end[t.support.transition]),c.cssanimations()&&(t.support.animation=new String(o("animation")),t.support.animation.end=l.animation.end[t.support.animation]),c.csstransforms()&&(t.support.transform=new String(o("transform")),t.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):window.jQuery||window.Zepto)}(function(t){var e,n,i,r,o,s,a="Close",l="BeforeClose",c="MarkupParse",u="Open",h="Change",p="mfp",f="."+p,d="mfp-ready",g="mfp-removing",m="mfp-prevent-close",v=function(){},y=!!window.jQuery,w=t(window),x=function(t,n){e.ev.on(p+t+f,n)},b=function(e,n,i,r){var o=document.createElement("div");return o.className="mfp-"+e,i&&(o.innerHTML=i),r?n&&n.appendChild(o):(o=t(o),n&&o.appendTo(n)),o},_=function(n,i){e.ev.triggerHandler(p+n,i),e.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),e.st.callbacks[n]&&e.st.callbacks[n].apply(e,t.isArray(i)?i:[i]))},C=function(n){return n===s&&e.currTemplate.closeBtn||(e.currTemplate.closeBtn=t(e.st.closeMarkup.replace("%title%",e.st.tClose)),s=n),e.currTemplate.closeBtn},T=function(){t.magnificPopup.instance||(e=new v,e.init(),t.magnificPopup.instance=e)},S=function(){var t=document.createElement("p").style,e=["ms","O","Moz","Webkit"];if(void 0!==t.transition)return!0;for(;e.length;)if(e.pop()+"Transition"in t)return!0;return!1};v.prototype={constructor:v,init:function(){var n=navigator.appVersion;e.isLowIE=e.isIE8=document.all&&!document.addEventListener,e.isAndroid=/android/gi.test(n),e.isIOS=/iphone|ipad|ipod/gi.test(n),e.supportsTransition=S(),e.probablyMobile=e.isAndroid||e.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=t(document),e.popupsCache={}},open:function(n){var r;if(!1===n.isObj){e.items=n.items.toArray(),e.index=0;var s,a=n.items;for(r=0;r<a.length;r++)if(s=a[r],s.parsed&&(s=s.el[0]),s===n.el[0]){e.index=r;break}}else e.items=t.isArray(n.items)?n.items:[n.items],e.index=n.index||0;if(e.isOpen)return void e.updateItemHTML();e.types=[],o="",n.mainEl&&n.mainEl.length?e.ev=n.mainEl.eq(0):e.ev=i,n.key?(e.popupsCache[n.key]||(e.popupsCache[n.key]={}),e.currTemplate=e.popupsCache[n.key]):e.currTemplate={},e.st=t.extend(!0,{},t.magnificPopup.defaults,n),e.fixedContentPos="auto"===e.st.fixedContentPos?!e.probablyMobile:e.st.fixedContentPos,e.st.modal&&(e.st.closeOnContentClick=!1,e.st.closeOnBgClick=!1,e.st.showCloseBtn=!1,e.st.enableEscapeKey=!1),e.bgOverlay||(e.bgOverlay=b("bg").on("click"+f,function(){e.close()}),e.wrap=b("wrap").attr("tabindex",-1).on("click"+f,function(t){e._checkIfClose(t.target)&&e.close()}),e.container=b("container",e.wrap)),e.contentContainer=b("content"),e.st.preloader&&(e.preloader=b("preloader",e.container,e.st.tLoading));var l=t.magnificPopup.modules;for(r=0;r<l.length;r++){var h=l[r];h=h.charAt(0).toUpperCase()+h.slice(1),e["init"+h].call(e)}_("BeforeOpen"),e.st.showCloseBtn&&(e.st.closeBtnInside?(x(c,function(t,e,n,i){n.close_replaceWith=C(i.type)}),o+=" mfp-close-btn-in"):e.wrap.append(C())),e.st.alignTop&&(o+=" mfp-align-top"),e.fixedContentPos?e.wrap.css({overflow:e.st.overflowY,overflowX:"hidden",overflowY:e.st.overflowY}):e.wrap.css({top:w.scrollTop(),position:"absolute"}),(!1===e.st.fixedBgPos||"auto"===e.st.fixedBgPos&&!e.fixedContentPos)&&e.bgOverlay.css({height:i.height(),position:"absolute"}),e.st.enableEscapeKey&&i.on("keyup"+f,function(t){27===t.keyCode&&e.close()}),w.on("resize"+f,function(){e.updateSize()}),e.st.closeOnContentClick||(o+=" mfp-auto-cursor"),o&&e.wrap.addClass(o);var p=e.wH=w.height(),g={};if(e.fixedContentPos&&e._hasScrollBar(p)){var m=e._getScrollbarSize();m&&(g.marginRight=m)}e.fixedContentPos&&(e.isIE7?t("body, html").css("overflow","hidden"):g.overflow="hidden");var v=e.st.mainClass;return e.isIE7&&(v+=" mfp-ie7"),v&&e._addClassToMFP(v),e.updateItemHTML(),_("BuildControls"),t("html").css(g),e.bgOverlay.add(e.wrap).prependTo(e.st.prependTo||t(document.body)),e._lastFocusedEl=document.activeElement,setTimeout(function(){e.content?(e._addClassToMFP(d),e._setFocus()):e.bgOverlay.addClass(d),i.on("focusin"+f,e._onFocusIn)},16),e.isOpen=!0,e.updateSize(p),_(u),n},close:function(){e.isOpen&&(_(l),e.isOpen=!1,e.st.removalDelay&&!e.isLowIE&&e.supportsTransition?(e._addClassToMFP(g),setTimeout(function(){e._close()},e.st.removalDelay)):e._close())},_close:function(){_(a);var n=g+" "+d+" ";if(e.bgOverlay.detach(),e.wrap.detach(),e.container.empty(),e.st.mainClass&&(n+=e.st.mainClass+" "),e._removeClassFromMFP(n),e.fixedContentPos){var r={marginRight:""};e.isIE7?t("body, html").css("overflow",""):r.overflow="",t("html").css(r)}i.off("keyup.mfp focusin"+f),e.ev.off(f),e.wrap.attr("class","mfp-wrap").removeAttr("style"),e.bgOverlay.attr("class","mfp-bg"),e.container.attr("class","mfp-container"),!e.st.showCloseBtn||e.st.closeBtnInside&&!0!==e.currTemplate[e.currItem.type]||e.currTemplate.closeBtn&&e.currTemplate.closeBtn.detach(),e.st.autoFocusLast&&e._lastFocusedEl&&t(e._lastFocusedEl).focus(),e.currItem=null,e.content=null,e.currTemplate=null,e.prevHeight=0,_("AfterClose")},updateSize:function(t){if(e.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;e.wrap.css("height",i),e.wH=i}else e.wH=t||w.height();e.fixedContentPos||e.wrap.css("height",e.wH),_("Resize")},updateItemHTML:function(){var n=e.items[e.index];e.contentContainer.detach(),e.content&&e.content.detach(),n.parsed||(n=e.parseEl(e.index));var i=n.type;if(_("BeforeChange",[e.currItem?e.currItem.type:"",i]),e.currItem=n,!e.currTemplate[i]){var o=!!e.st[i]&&e.st[i].markup;_("FirstMarkupParse",o),e.currTemplate[i]=!o||t(o)}r&&r!==n.type&&e.container.removeClass("mfp-"+r+"-holder");var s=e["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,e.currTemplate[i]);e.appendContent(s,i),n.preloaded=!0,_(h,n),r=n.type,e.container.prepend(e.contentContainer),_("AfterChange")},appendContent:function(t,n){e.content=t,t?e.st.showCloseBtn&&e.st.closeBtnInside&&!0===e.currTemplate[n]?e.content.find(".mfp-close").length||e.content.append(C()):e.content=t:e.content="",_("BeforeAppend"),e.container.addClass("mfp-"+n+"-holder"),e.contentContainer.append(e.content)},parseEl:function(n){var i,r=e.items[n];if(r.tagName?r={el:t(r)}:(i=r.type,r={data:r,src:r.src}),r.el){for(var o=e.types,s=0;s<o.length;s++)if(r.el.hasClass("mfp-"+o[s])){i=o[s];break}r.src=r.el.attr("data-mfp-src"),r.src||(r.src=r.el.attr("href"))}return r.type=i||e.st.type||"inline",r.index=n,r.parsed=!0,e.items[n]=r,_("ElementParse",r),e.items[n]},addGroup:function(t,n){var i=function(i){i.mfpEl=this,e._openClick(i,t,n)};n||(n={});var r="click.magnificPopup";n.mainEl=t,n.items?(n.isObj=!0,t.off(r).on(r,i)):(n.isObj=!1,n.delegate?t.off(r).on(r,n.delegate,i):(n.items=t,t.off(r).on(r,i)))},_openClick:function(n,i,r){if((void 0!==r.midClick?r.midClick:t.magnificPopup.defaults.midClick)||!(2===n.which||n.ctrlKey||n.metaKey||n.altKey||n.shiftKey)){var o=void 0!==r.disableOn?r.disableOn:t.magnificPopup.defaults.disableOn;if(o)if(t.isFunction(o)){if(!o.call(e))return!0}else if(w.width()<o)return!0;n.type&&(n.preventDefault(),e.isOpen&&n.stopPropagation()),r.el=t(n.mfpEl),r.delegate&&(r.items=i.find(r.delegate)),e.open(r)}},updateStatus:function(t,i){if(e.preloader){n!==t&&e.container.removeClass("mfp-s-"+n),i||"loading"!==t||(i=e.st.tLoading);var r={status:t,text:i};_("UpdateStatus",r),t=r.status,i=r.text,e.preloader.html(i),e.preloader.find("a").on("click",function(t){t.stopImmediatePropagation()}),e.container.addClass("mfp-s-"+t),n=t}},_checkIfClose:function(n){if(!t(n).hasClass(m)){var i=e.st.closeOnContentClick,r=e.st.closeOnBgClick;if(i&&r)return!0;if(!e.content||t(n).hasClass("mfp-close")||e.preloader&&n===e.preloader[0])return!0;if(n===e.content[0]||t.contains(e.content[0],n)){if(i)return!0}else if(r&&t.contains(document,n))return!0;return!1}},_addClassToMFP:function(t){e.bgOverlay.addClass(t),e.wrap.addClass(t)},_removeClassFromMFP:function(t){this.bgOverlay.removeClass(t),e.wrap.removeClass(t)},_hasScrollBar:function(t){
return(e.isIE7?i.height():document.body.scrollHeight)>(t||w.height())},_setFocus:function(){(e.st.focus?e.content.find(e.st.focus).eq(0):e.wrap).focus()},_onFocusIn:function(n){return n.target===e.wrap[0]||t.contains(e.wrap[0],n.target)?void 0:(e._setFocus(),!1)},_parseMarkup:function(e,n,i){var r;i.data&&(n=t.extend(i.data,n)),_(c,[e,n,i]),t.each(n,function(n,i){if(void 0===i||!1===i)return!0;if(r=n.split("_"),r.length>1){var o=e.find(f+"-"+r[0]);if(o.length>0){var s=r[1];"replaceWith"===s?o[0]!==i[0]&&o.replaceWith(i):"img"===s?o.is("img")?o.attr("src",i):o.replaceWith(t("<img>").attr("src",i).attr("class",o.attr("class"))):o.attr(r[1],i)}}else e.find(f+"-"+n).html(i)})},_getScrollbarSize:function(){if(void 0===e.scrollbarSize){var t=document.createElement("div");t.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(t),e.scrollbarSize=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return e.scrollbarSize}},t.magnificPopup={instance:null,proto:v.prototype,modules:[],open:function(e,n){return T(),e=e?t.extend(!0,{},e):{},e.isObj=!0,e.index=n||0,this.instance.open(e)},close:function(){return t.magnificPopup.instance&&t.magnificPopup.instance.close()},registerModule:function(e,n){n.options&&(t.magnificPopup.defaults[e]=n.options),t.extend(this.proto,n.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},t.fn.magnificPopup=function(n){T();var i=t(this);if("string"==typeof n)if("open"===n){var r,o=y?i.data("magnificPopup"):i[0].magnificPopup,s=parseInt(arguments[1],10)||0;o.items?r=o.items[s]:(r=i,o.delegate&&(r=r.find(o.delegate)),r=r.eq(s)),e._openClick({mfpEl:r},i,o)}else e.isOpen&&e[n].apply(e,Array.prototype.slice.call(arguments,1));else n=t.extend(!0,{},n),y?i.data("magnificPopup",n):i[0].magnificPopup=n,e.addGroup(i,n);return i};var k,E,L,O="inline",z=function(){L&&(E.after(L.addClass(k)).detach(),L=null)};t.magnificPopup.registerModule(O,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){e.types.push(O),x(a+"."+O,function(){z()})},getInline:function(n,i){if(z(),n.src){var r=e.st.inline,o=t(n.src);if(o.length){var s=o[0].parentNode;s&&s.tagName&&(E||(k=r.hiddenClass,E=b(k),k="mfp-"+k),L=o.after(E).detach().removeClass(k)),e.updateStatus("ready")}else e.updateStatus("error",r.tNotFound),o=t("<div>");return n.inlineElement=o,o}return e.updateStatus("ready"),e._parseMarkup(i,{},n),i}}});var $,P="ajax",j=function(){$&&t(document.body).removeClass($)},A=function(){j(),e.req&&e.req.abort()};t.magnificPopup.registerModule(P,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){e.types.push(P),$=e.st.ajax.cursor,x(a+"."+P,A),x("BeforeChange."+P,A)},getAjax:function(n){$&&t(document.body).addClass($),e.updateStatus("loading");var i=t.extend({url:n.src,success:function(i,r,o){var s={data:i,xhr:o};_("ParseAjax",s),e.appendContent(t(s.data),P),n.finished=!0,j(),e._setFocus(),setTimeout(function(){e.wrap.addClass(d)},16),e.updateStatus("ready"),_("AjaxContentAdded")},error:function(){j(),n.finished=n.loadError=!0,e.updateStatus("error",e.st.ajax.tError.replace("%url%",n.src))}},e.st.ajax.settings);return e.req=t.ajax(i),""}}});var D,N=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=e.st.image.titleSrc;if(i){if(t.isFunction(i))return i.call(e,n);if(n.el)return n.el.attr(i)||""}return""};t.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var n=e.st.image,i=".image";e.types.push("image"),x(u+i,function(){"image"===e.currItem.type&&n.cursor&&t(document.body).addClass(n.cursor)}),x(a+i,function(){n.cursor&&t(document.body).removeClass(n.cursor),w.off("resize"+f)}),x("Resize"+i,e.resizeImage),e.isLowIE&&x("AfterChange",e.resizeImage)},resizeImage:function(){var t=e.currItem;if(t&&t.img&&e.st.image.verticalFit){var n=0;e.isLowIE&&(n=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",e.wH-n)}},_onImageHasSize:function(t){t.img&&(t.hasSize=!0,D&&clearInterval(D),t.isCheckingImgSize=!1,_("ImageHasSize",t),t.imgHidden&&(e.content&&e.content.removeClass("mfp-loading"),t.imgHidden=!1))},findImageSize:function(t){var n=0,i=t.img[0],r=function(o){D&&clearInterval(D),D=setInterval(function(){return i.naturalWidth>0?void e._onImageHasSize(t):(n>200&&clearInterval(D),n++,void(3===n?r(10):40===n?r(50):100===n&&r(500)))},o)};r(1)},getImage:function(n,i){var r=0,o=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===e.currItem&&(e._onImageHasSize(n),e.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,_("ImageLoadComplete")):(r++,200>r?setTimeout(o,100):s()))},s=function(){n&&(n.img.off(".mfploader"),n===e.currItem&&(e._onImageHasSize(n),e.updateStatus("error",a.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},a=e.st.image,l=i.find(".mfp-img");if(l.length){var c=document.createElement("img");c.className="mfp-img",n.el&&n.el.find("img").length&&(c.alt=n.el.find("img").attr("alt")),n.img=t(c).on("load.mfploader",o).on("error.mfploader",s),c.src=n.src,l.is("img")&&(n.img=n.img.clone()),c=n.img[0],c.naturalWidth>0?n.hasSize=!0:c.width||(n.hasSize=!1)}return e._parseMarkup(i,{title:N(n),img_replaceWith:n.img},n),e.resizeImage(),n.hasSize?(D&&clearInterval(D),n.loadError?(i.addClass("mfp-loading"),e.updateStatus("error",a.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),e.updateStatus("ready")),i):(e.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),e.findImageSize(n)),i)}}});var I,H=function(){return void 0===I&&(I=void 0!==document.createElement("p").style.MozTransform),I};t.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(t){return t.is("img")?t:t.find("img")}},proto:{initZoom:function(){var t,n=e.st.zoom,i=".zoom";if(n.enabled&&e.supportsTransition){var r,o,s=n.duration,c=function(t){var e=t.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,r={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return r["-webkit-"+o]=r["-moz-"+o]=r["-o-"+o]=r[o]=i,e.css(r),e},u=function(){e.content.css("visibility","visible")};x("BuildControls"+i,function(){if(e._allowZoom()){if(clearTimeout(r),e.content.css("visibility","hidden"),!(t=e._getItemToZoom()))return void u();o=c(t),o.css(e._getOffset()),e.wrap.append(o),r=setTimeout(function(){o.css(e._getOffset(!0)),r=setTimeout(function(){u(),setTimeout(function(){o.remove(),t=o=null,_("ZoomAnimationEnded")},16)},s)},16)}}),x(l+i,function(){if(e._allowZoom()){if(clearTimeout(r),e.st.removalDelay=s,!t){if(!(t=e._getItemToZoom()))return;o=c(t)}o.css(e._getOffset(!0)),e.wrap.append(o),e.content.css("visibility","hidden"),setTimeout(function(){o.css(e._getOffset())},16)}}),x(a+i,function(){e._allowZoom()&&(u(),o&&o.remove(),t=null)})}},_allowZoom:function(){return"image"===e.currItem.type},_getItemToZoom:function(){return!!e.currItem.hasSize&&e.currItem.img},_getOffset:function(n){var i;i=n?e.currItem.img:e.st.zoom.opener(e.currItem.el||e.currItem);var r=i.offset(),o=parseInt(i.css("padding-top"),10),s=parseInt(i.css("padding-bottom"),10);r.top-=t(window).scrollTop()-o;var a={width:i.width(),height:(y?i.innerHeight():i[0].offsetHeight)-s-o};return H()?a["-moz-transform"]=a.transform="translate("+r.left+"px,"+r.top+"px)":(a.left=r.left,a.top=r.top),a}}});var M="iframe",F=function(t){if(e.currTemplate[M]){var n=e.currTemplate[M].find("iframe");n.length&&(t||(n[0].src="//about:blank"),e.isIE8&&n.css("display",t?"block":"none"))}};t.magnificPopup.registerModule(M,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){e.types.push(M),x("BeforeChange",function(t,e,n){e!==n&&(e===M?F():n===M&&F(!0))}),x(a+"."+M,function(){F()})},getIframe:function(n,i){var r=n.src,o=e.st.iframe;t.each(o.patterns,function(){return r.indexOf(this.index)>-1?(this.id&&(r="string"==typeof this.id?r.substr(r.lastIndexOf(this.id)+this.id.length,r.length):this.id.call(this,r)),r=this.src.replace("%id%",r),!1):void 0});var s={};return o.srcAction&&(s[o.srcAction]=r),e._parseMarkup(i,s,n),e.updateStatus("ready"),i}}});var q=function(t){var n=e.items.length;return t>n-1?t-n:0>t?n+t:t},W=function(t,e,n){return t.replace(/%curr%/gi,e+1).replace(/%total%/gi,n)};t.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=e.st.gallery,r=".mfp-gallery";return e.direction=!0,!(!n||!n.enabled)&&(o+=" mfp-gallery",x(u+r,function(){n.navigateByImgClick&&e.wrap.on("click"+r,".mfp-img",function(){return e.items.length>1?(e.next(),!1):void 0}),i.on("keydown"+r,function(t){37===t.keyCode?e.prev():39===t.keyCode&&e.next()})}),x("UpdateStatus"+r,function(t,n){n.text&&(n.text=W(n.text,e.currItem.index,e.items.length))}),x(c+r,function(t,i,r,o){var s=e.items.length;r.counter=s>1?W(n.tCounter,o.index,s):""}),x("BuildControls"+r,function(){if(e.items.length>1&&n.arrows&&!e.arrowLeft){var i=n.arrowMarkup,r=e.arrowLeft=t(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(m),o=e.arrowRight=t(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(m);r.click(function(){e.prev()}),o.click(function(){e.next()}),e.container.append(r.add(o))}}),x(h+r,function(){e._preloadTimeout&&clearTimeout(e._preloadTimeout),e._preloadTimeout=setTimeout(function(){e.preloadNearbyImages(),e._preloadTimeout=null},16)}),void x(a+r,function(){i.off(r),e.wrap.off("click"+r),e.arrowRight=e.arrowLeft=null}))},next:function(){e.direction=!0,e.index=q(e.index+1),e.updateItemHTML()},prev:function(){e.direction=!1,e.index=q(e.index-1),e.updateItemHTML()},goTo:function(t){e.direction=t>=e.index,e.index=t,e.updateItemHTML()},preloadNearbyImages:function(){var t,n=e.st.gallery.preload,i=Math.min(n[0],e.items.length),r=Math.min(n[1],e.items.length);for(t=1;t<=(e.direction?r:i);t++)e._preloadItem(e.index+t);for(t=1;t<=(e.direction?i:r);t++)e._preloadItem(e.index-t)},_preloadItem:function(n){if(n=q(n),!e.items[n].preloaded){var i=e.items[n];i.parsed||(i=e.parseEl(n)),_("LazyLoad",i),"image"===i.type&&(i.img=t('<img class="mfp-img" />').on("load.mfploader",function(){i.hasSize=!0}).on("error.mfploader",function(){i.hasSize=!0,i.loadError=!0,_("LazyLoadError",i)}).attr("src",i.src)),i.preloaded=!0}}}});var R="retina";t.magnificPopup.registerModule(R,{options:{replaceSrc:function(t){return t.src.replace(/\.\w+$/,function(t){return"@2x"+t})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var t=e.st.retina,n=t.ratio;(n=isNaN(n)?n():n)>1&&(x("ImageHasSize."+R,function(t,e){e.img.css({"max-width":e.img[0].naturalWidth/n,width:"100%"})}),x("ElementParse."+R,function(e,i){i.src=t.replaceSrc(i,n)}))}}}}),T()}),function(){var t=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1},e=[].slice;!function(t,e){"function"==typeof define&&define.amd?define("waypoints",["jquery"],function(n){return e(n,t)}):e(t.jQuery,t)}(window,function(n,i){var r,o,s,a,l,c,u,h,p,f,d,g,m,v,y,w;return r=n(i),h=t.call(i,"ontouchstart")>=0,a={horizontal:{},vertical:{}},l=1,u={},c="waypoints-context-id",d="resize.waypoints",g="scroll.waypoints",m=1,v="waypoints-waypoint-ids",y="waypoint",w="waypoints",o=function(){function t(t){var e=this;this.$element=t,this.element=t[0],this.didResize=!1,this.didScroll=!1,this.id="context"+l++,this.oldScroll={x:t.scrollLeft(),y:t.scrollTop()},this.waypoints={horizontal:{},vertical:{}},this.element[c]=this.id,u[this.id]=this,t.bind(g,function(){var t;if(!e.didScroll&&!h)return e.didScroll=!0,t=function(){return e.doScroll(),e.didScroll=!1},i.setTimeout(t,n[w].settings.scrollThrottle)}),t.bind(d,function(){var t;if(!e.didResize)return e.didResize=!0,t=function(){return n[w]("refresh"),e.didResize=!1},i.setTimeout(t,n[w].settings.resizeThrottle)})}return t.prototype.doScroll=function(){var t,e=this;return t={horizontal:{newScroll:this.$element.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.$element.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}},!h||t.vertical.oldScroll&&t.vertical.newScroll||n[w]("refresh"),n.each(t,function(t,i){var r,o,s;return s=[],o=i.newScroll>i.oldScroll,r=o?i.forward:i.backward,n.each(e.waypoints[t],function(t,e){var n,r;return i.oldScroll<(n=e.offset)&&n<=i.newScroll?s.push(e):i.newScroll<(r=e.offset)&&r<=i.oldScroll?s.push(e):void 0}),s.sort(function(t,e){return t.offset-e.offset}),o||s.reverse(),n.each(s,function(t,e){if(e.options.continuous||t===s.length-1)return e.trigger([r])})}),this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.refresh=function(){var t,e,i,r=this;return i=n.isWindow(this.element),e=this.$element.offset(),this.doScroll(),t={horizontal:{contextOffset:i?0:e.left,contextScroll:i?0:this.oldScroll.x,contextDimension:this.$element.width(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:i?0:e.top,contextScroll:i?0:this.oldScroll.y,contextDimension:i?n[w]("viewportHeight"):this.$element.height(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}},n.each(t,function(t,e){return n.each(r.waypoints[t],function(t,i){var r,o,s,a,l;if(r=i.options.offset,s=i.offset,o=n.isWindow(i.element)?0:i.$element.offset()[e.offsetProp],n.isFunction(r)?r=r.apply(i.element):"string"==typeof r&&(r=parseFloat(r),i.options.offset.indexOf("%")>-1&&(r=Math.ceil(e.contextDimension*r/100))),i.offset=o-e.contextOffset+e.contextScroll-r,(!i.options.onlyOnScroll||null==s)&&i.enabled)return null!==s&&s<(a=e.oldScroll)&&a<=i.offset?i.trigger([e.backward]):null!==s&&s>(l=e.oldScroll)&&l>=i.offset?i.trigger([e.forward]):null===s&&e.oldScroll>=i.offset?i.trigger([e.forward]):void 0})})},t.prototype.checkEmpty=function(){if(n.isEmptyObject(this.waypoints.horizontal)&&n.isEmptyObject(this.waypoints.vertical))return this.$element.unbind([d,g].join(" ")),delete u[this.id]},t}(),s=function(){function t(t,e,i){var r,o;"bottom-in-view"===i.offset&&(i.offset=function(){var t;return t=n[w]("viewportHeight"),n.isWindow(e.element)||(t=e.$element.height()),t-n(this).outerHeight()}),this.$element=t,this.element=t[0],this.axis=i.horizontal?"horizontal":"vertical",this.callback=i.handler,this.context=e,this.enabled=i.enabled,this.id="waypoints"+m++,this.offset=null,this.options=i,e.waypoints[this.axis][this.id]=this,a[this.axis][this.id]=this,r=null!=(o=this.element[v])?o:[],r.push(this.id),this.element[v]=r}return t.prototype.trigger=function(t){if(this.enabled)return null!=this.callback&&this.callback.apply(this.element,t),this.options.triggerOnce?this.destroy():void 0},t.prototype.disable=function(){return this.enabled=!1},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0},t.prototype.destroy=function(){return delete a[this.axis][this.id],delete this.context.waypoints[this.axis][this.id],this.context.checkEmpty()},t.getWaypointsByElement=function(t){var e,i;return(i=t[v])?(e=n.extend({},a.horizontal,a.vertical),n.map(i,function(t){return e[t]})):[]},t}(),f={init:function(t,e){return e=n.extend({},n.fn[y].defaults,e),null==e.handler&&(e.handler=t),this.each(function(){var t,i,r,a;return t=n(this),r=null!=(a=e.context)?a:n.fn[y].defaults.context,n.isWindow(r)||(r=t.closest(r)),r=n(r),i=u[r[0][c]],i||(i=new o(r)),new s(t,i,e)}),n[w]("refresh"),this},disable:function(){return f._invoke.call(this,"disable")},enable:function(){return f._invoke.call(this,"enable")},destroy:function(){return f._invoke.call(this,"destroy")},prev:function(t,e){return f._traverse.call(this,t,e,function(t,e,n){if(e>0)return t.push(n[e-1])})},next:function(t,e){return f._traverse.call(this,t,e,function(t,e,n){if(e<n.length-1)return t.push(n[e+1])})},_traverse:function(t,e,r){var o,s;return null==t&&(t="vertical"),null==e&&(e=i),s=p.aggregate(e),o=[],this.each(function(){var e;return e=n.inArray(this,s[t]),r(o,e,s[t])}),this.pushStack(o)},_invoke:function(t){return this.each(function(){var e;return e=s.getWaypointsByElement(this),n.each(e,function(e,n){return n[t](),!0})}),this}},n.fn[y]=function(){var t,i;return i=arguments[0],t=2<=arguments.length?e.call(arguments,1):[],f[i]?f[i].apply(this,t):n.isFunction(i)?f.init.apply(this,arguments):n.isPlainObject(i)?f.init.apply(this,[null,i]):i?n.error("The "+i+" method does not exist in jQuery Waypoints."):n.error("jQuery Waypoints needs a callback function or handler option.")},n.fn[y].defaults={context:i,continuous:!0,enabled:!0,horizontal:!1,offset:0,triggerOnce:!1},p={refresh:function(){return n.each(u,function(t,e){return e.refresh()})},viewportHeight:function(){var t;return null!=(t=i.innerHeight)?t:r.height()},aggregate:function(t){var e,i,r;return e=a,t&&(e=null!=(r=u[n(t)[0][c]])?r.waypoints:void 0),e?(i={horizontal:[],vertical:[]},n.each(i,function(t,r){return n.each(e[t],function(t,e){return r.push(e)}),r.sort(function(t,e){return t.offset-e.offset}),i[t]=n.map(r,function(t){return t.element}),i[t]=n.unique(i[t])}),i):[]},above:function(t){return null==t&&(t=i),p._filter(t,"vertical",function(t,e){return e.offset<=t.oldScroll.y})},below:function(t){return null==t&&(t=i),p._filter(t,"vertical",function(t,e){return e.offset>t.oldScroll.y})},left:function(t){return null==t&&(t=i),p._filter(t,"horizontal",function(t,e){return e.offset<=t.oldScroll.x})},right:function(t){return null==t&&(t=i),p._filter(t,"horizontal",function(t,e){return e.offset>t.oldScroll.x})},enable:function(){return p._invoke("enable")},disable:function(){return p._invoke("disable")},destroy:function(){return p._invoke("destroy")},extendFn:function(t,e){return f[t]=e},_invoke:function(t){var e;return e=n.extend({},a.vertical,a.horizontal),n.each(e,function(e,n){return n[t](),!0})},_filter:function(t,e,i){var r,o;return(r=u[n(t)[0][c]])?(o=[],n.each(r.waypoints[e],function(t,e){if(i(r,e))return o.push(e)}),o.sort(function(t,e){return t.offset-e.offset}),n.map(o,function(t){return t.element})):[]}},n[w]=function(){var t,n;return n=arguments[0],t=2<=arguments.length?e.call(arguments,1):[],p[n]?p[n].apply(null,t):p.aggregate.call(null,n)},n[w].settings={resizeThrottle:100,scrollThrottle:30},r.on("load.waypoints",function(){return n[w]("refresh")})})}.call(this),function(t){t.fn.animated=function(e,n){t(this).css("opacity","0").addClass("animated").waypoint(function(i){"down"===i?t(this).removeClass(n).addClass(e).css("opacity","1"):t(this).removeClass(e).addClass(n).css("opacity","1")},{offset:"80%"}).waypoint(function(i){"down"===i?t(this).removeClass(e).addClass(n).css("opacity","1"):t(this).removeClass(n).addClass(e).css("opacity","1")},{offset:-t(window).height()})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
